
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo3d.backend.analizadores;

import java_cup.runtime.*;
import codigo3d.backend.manejadores.*;
import codigo3d.backend.objetos.*;
import java.awt.Color;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\272\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\006\005\000\002\006\004\000\002\013\005" +
    "\000\002\013\004\000\002\013\003\000\002\013\003\000" +
    "\002\116\002\000\002\012\007\000\002\014\004\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\117" +
    "\002\000\002\106\007\000\002\007\004\000\002\007\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\004" +
    "\000\002\113\005\000\002\114\004\000\002\114\005\000" +
    "\002\115\005\000\002\115\003\000\002\112\005\000\002" +
    "\110\004\000\002\110\005\000\002\107\005\000\002\107" +
    "\003\000\002\111\004\000\002\016\007\000\002\016\005" +
    "\000\002\016\005\000\002\016\004\000\002\027\004\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\005\004\000\002\005\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\005" +
    "\000\002\026\005\000\002\026\003\000\002\025\003\000" +
    "\002\025\003\000\002\023\004\000\002\021\004\000\002" +
    "\035\004\000\002\035\003\000\002\036\005\000\002\033" +
    "\007\000\002\034\005\000\002\034\003\000\002\031\006" +
    "\000\002\032\004\000\002\037\007\000\002\037\007\000" +
    "\002\040\003\000\002\041\005\000\002\041\004\000\002" +
    "\041\004\000\002\041\003\000\002\042\004\000\002\042" +
    "\003\000\002\043\007\000\002\044\004\000\002\045\005" +
    "\000\002\045\004\000\002\045\004\000\002\045\003\000" +
    "\002\046\004\000\002\046\003\000\002\047\007\000\002" +
    "\050\004\000\002\051\007\000\002\052\003\000\002\052" +
    "\003\000\002\056\010\000\002\057\003\000\002\057\003" +
    "\000\002\054\014\000\002\055\003\000\002\055\003\000" +
    "\002\104\007\000\002\104\007\000\002\105\007\000\002" +
    "\105\007\000\002\060\005\000\002\061\005\000\002\062" +
    "\005\000\002\063\005\000\002\065\005\000\002\065\003" +
    "\000\002\066\005\000\002\066\003\000\002\064\003\000" +
    "\002\053\003\000\002\053\003\000\002\024\004\000\002" +
    "\022\004\000\002\020\004\000\002\073\003\000\002\074" +
    "\003\000\002\075\005\000\002\075\005\000\002\075\005" +
    "\000\002\075\005\000\002\075\005\000\002\075\005\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\076\003" +
    "\000\002\077\005\000\002\077\005\000\002\077\004\000" +
    "\002\077\005\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\100\003\000\002\101" +
    "\005\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\102\003\000\002\103\005\000\002\103\005\000\002" +
    "\103\005\000\002\103\005\000\002\103\005\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\072\003\000\002\072\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\036\003\027\004\020\005\012\006\013\007" +
    "\010\010\005\011\022\012\036\013\021\021\034\061\015" +
    "\064\025\066\016\067\033\001\002\000\032\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\021\uffcb\061\uffcb\066\uffcb\067\uffcb\001\002\000\006\036" +
    "\uff4c\061\uff4c\001\002\000\032\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\021\ufff3\061" +
    "\ufff3\066\ufff3\067\ufff3\001\002\000\004\061\u0107\001\002" +
    "\000\006\036\uff4d\061\uff4d\001\002\000\032\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\021\uffcc\061\uffcc\066\uffcc\067\uffcc\001\002\000\006\036" +
    "\uff4f\061\uff4f\001\002\000\006\036\uff4e\061\uff4e\001\002" +
    "\000\032\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\021\uffc9\061\uffc9\066\uffc9\067\uffc9" +
    "\001\002\000\006\036\076\041\361\001\002\000\004\064" +
    "\025\001\002\000\004\002\u0105\001\002\000\006\036\uff50" +
    "\061\uff50\001\002\000\006\036\uff49\061\uff49\001\002\000" +
    "\006\036\uff4b\061\uff4b\001\002\000\004\002\ufffa\001\002" +
    "\000\032\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\021\ufff4\061\ufff4\066\ufff4\067\ufff4" +
    "\001\002\000\004\034\130\001\002\000\004\040\127\001" +
    "\002\000\004\002\ufff9\001\002\000\022\017\044\020\054" +
    "\034\050\055\057\056\056\057\046\060\047\061\051\001" +
    "\002\000\032\004\020\005\012\006\013\007\010\010\005" +
    "\011\022\012\036\013\021\021\034\061\015\066\123\067" +
    "\033\001\002\000\032\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\021\ufff5\061\ufff5\066" +
    "\ufff5\067\ufff5\001\002\000\006\036\uff48\061\uff48\001\002" +
    "\000\024\004\020\005\012\006\013\007\010\010\005\011" +
    "\022\012\036\013\021\067\033\001\002\000\032\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\021\uffca\061\uffca\066\uffca\067\uffca\001\002\000\006" +
    "\036\uff4a\061\uff4a\001\002\000\004\041\040\001\002\000" +
    "\022\017\044\020\054\034\050\055\057\056\056\057\046" +
    "\060\047\061\051\001\002\000\026\032\uff71\033\uff71\035" +
    "\uff71\037\uff71\040\uff71\042\uff71\043\uff71\044\uff71\045\uff71" +
    "\046\uff71\001\002\000\026\032\uff72\033\uff72\035\uff72\037" +
    "\uff72\040\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72" +
    "\001\002\000\026\032\uff75\033\uff75\035\uff75\037\uff75\040" +
    "\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\001\002" +
    "\000\032\015\uff52\016\uff52\032\uff52\033\uff52\035\uff52\037" +
    "\uff52\040\uff52\042\uff52\043\uff52\044\uff52\045\uff52\046\uff52" +
    "\001\002\000\004\040\113\001\002\000\046\015\uff6e\016" +
    "\uff6e\032\uff6e\033\uff6e\035\uff6e\037\uff6e\040\uff6e\042\uff6e" +
    "\043\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051" +
    "\uff6e\052\uff6e\053\uff6e\054\uff6e\001\002\000\046\015\uff6f" +
    "\016\uff6f\032\uff6f\033\uff6f\035\uff6f\037\uff6f\040\uff6f\042" +
    "\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f" +
    "\051\uff6f\052\uff6f\053\uff6f\054\uff6f\001\002\000\022\017" +
    "\044\020\054\034\050\055\057\056\056\057\046\060\047" +
    "\061\051\001\002\000\032\032\uff74\033\uff74\034\075\035" +
    "\uff74\036\076\037\uff74\040\uff74\042\uff74\043\uff74\044\uff74" +
    "\045\uff74\046\uff74\001\002\000\026\032\uff76\033\uff76\035" +
    "\uff76\037\uff76\040\uff76\042\uff76\043\uff76\044\uff76\045\uff76" +
    "\046\uff76\001\002\000\026\032\uff7d\033\uff7d\035\uff7d\037" +
    "\uff7d\040\uff7d\042\061\043\063\044\064\045\062\046\060" +
    "\001\002\000\032\015\uff51\016\uff51\032\uff51\033\uff51\035" +
    "\uff51\037\uff51\040\uff51\042\uff51\043\uff51\044\uff51\045\uff51" +
    "\046\uff51\001\002\000\010\032\uff7e\033\uff7e\040\uff7e\001" +
    "\002\000\046\015\uff70\016\uff70\032\uff70\033\uff70\035\uff70" +
    "\037\uff70\040\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046" +
    "\uff70\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70" +
    "\001\002\000\026\032\uff73\033\uff73\035\uff73\037\uff73\040" +
    "\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73\001\002" +
    "\000\022\017\044\020\054\034\050\055\057\056\056\057" +
    "\046\060\047\061\051\001\002\000\022\017\044\020\054" +
    "\034\050\055\057\056\056\057\046\060\047\061\051\001" +
    "\002\000\022\017\044\020\054\034\050\055\057\056\056" +
    "\057\046\060\047\061\051\001\002\000\022\017\044\020" +
    "\054\034\050\055\057\056\056\057\046\060\047\061\051" +
    "\001\002\000\022\017\044\020\054\034\050\055\057\056" +
    "\056\057\046\060\047\061\051\001\002\000\026\032\uff7c" +
    "\033\uff7c\035\uff7c\037\uff7c\040\uff7c\042\uff7c\043\uff7c\044" +
    "\uff7c\045\uff7c\046\uff7c\001\002\000\026\032\uff7b\033\uff7b" +
    "\035\uff7b\037\uff7b\040\uff7b\042\uff7b\043\uff7b\044\064\045" +
    "\062\046\060\001\002\000\026\032\uff7a\033\uff7a\035\uff7a" +
    "\037\uff7a\040\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046" +
    "\uff7a\001\002\000\026\032\uff78\033\uff78\035\uff78\037\uff78" +
    "\040\uff78\042\uff78\043\063\044\064\045\062\046\060\001" +
    "\002\000\026\032\uff79\033\uff79\035\uff79\037\uff79\040\uff79" +
    "\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\001\002\000" +
    "\052\015\uffad\016\uffad\032\uffad\033\uffad\035\uffad\036\076" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\001\002\000\004\040\107\001\002\000\054\015" +
    "\uffb3\016\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3\037\uffb3" +
    "\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\061\uffb3\001\002\000\024\017\044\020\054\034\050\035" +
    "\102\055\057\056\056\057\046\060\047\061\051\001\002" +
    "\000\022\017\044\020\054\034\050\055\057\056\056\057" +
    "\046\060\047\061\051\001\002\000\004\037\100\001\002" +
    "\000\054\015\uffb2\016\uffb2\032\uffb2\033\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053" +
    "\uffb2\054\uffb2\061\uffb2\001\002\000\006\032\104\035\105" +
    "\001\002\000\004\040\uffe0\001\002\000\006\032\uffdd\035" +
    "\uffdd\001\002\000\022\017\044\020\054\034\050\055\057" +
    "\056\056\057\046\060\047\061\051\001\002\000\004\040" +
    "\uffdf\001\002\000\006\032\uffde\035\uffde\001\002\000\046" +
    "\015\uffe1\016\uffe1\032\uffe1\033\uffe1\035\uffe1\037\uffe1\040" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\001\002\000" +
    "\054\015\uffb4\016\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\061\uffb4\001\002\000\016\035\112\042\061\043" +
    "\063\044\064\045\062\046\060\001\002\000\026\032\uff77" +
    "\033\uff77\035\uff77\037\uff77\040\uff77\042\uff77\043\uff77\044" +
    "\uff77\045\uff77\046\uff77\001\002\000\064\003\uffae\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\037\uffae\061\uffae\062\uffae\063" +
    "\uffae\065\uffae\066\uffae\067\uffae\001\002\000\004\036\076" +
    "\001\002\000\006\036\076\061\117\001\002\000\006\032" +
    "\120\040\121\001\002\000\006\032\uffaf\040\uffaf\001\002" +
    "\000\004\061\122\001\002\000\064\003\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\037\uffb1\061\uffb1\062\uffb1\063\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\001\002\000\006\032\uffb0\040" +
    "\uffb0\001\002\000\004\064\025\001\002\000\032\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\021\ufff6\061\ufff6\066\ufff6\067\ufff6\001\002\000\004" +
    "\002\ufffc\001\002\000\006\033\uff80\040\uff80\001\002\000" +
    "\064\003\uff81\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81" +
    "\011\uff81\012\uff81\013\uff81\021\uff81\022\uff81\023\uff81\024" +
    "\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031\uff81\037\uff81" +
    "\061\uff81\062\uff81\063\uff81\065\uff81\066\uff81\067\uff81\001" +
    "\002\000\004\035\131\001\002\000\004\036\ufff8\001\002" +
    "\000\004\036\133\001\002\000\054\003\142\004\020\005" +
    "\012\006\013\007\010\010\005\011\022\012\036\013\021" +
    "\021\034\022\141\025\152\026\164\027\137\030\163\031" +
    "\136\037\147\061\015\062\161\063\165\067\033\001\002" +
    "\000\004\002\ufff7\001\002\000\062\003\uffc5\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\037\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\065\uffc5\067\uffc5\001\002\000\004\036\375\001\002\000" +
    "\004\034\356\001\002\000\054\003\uffcd\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\021" +
    "\uffcd\022\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\037\uffcd\061\uffcd\062\uffcd\063\uffcd\067\uffcd\001\002\000" +
    "\004\034\316\001\002\000\004\040\315\001\002\000\054" +
    "\003\142\004\020\005\012\006\013\007\010\010\005\011" +
    "\022\012\036\013\021\021\034\022\141\025\152\026\164" +
    "\027\137\030\163\031\136\037\314\061\015\062\161\063" +
    "\165\067\033\001\002\000\062\003\uffc3\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\021" +
    "\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\037\uffc3\061\uffc3\062\uffc3\063\uffc3\065" +
    "\uffc3\067\uffc3\001\002\000\062\003\uffc4\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\037\uffc4\061\uffc4\062\uffc4\063\uffc4\065" +
    "\uffc4\067\uffc4\001\002\000\062\003\uffbf\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\037\uffbf\061\uffbf\062\uffbf\063\uffbf\065" +
    "\uffbf\067\uffbf\001\002\000\064\002\ufffd\003\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\037\ufffd\061\ufffd\062\ufffd\063" +
    "\ufffd\065\ufffd\067\ufffd\001\002\000\004\061\305\001\002" +
    "\000\062\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\037" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\065\uffc7\067\uffc7\001\002" +
    "\000\004\034\273\001\002\000\062\003\uffc2\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\037\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\065\uffc2\067\uffc2\001\002\000\062\003\uffbe\004\uffbe\005" +
    "\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\037\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\065\uffbe\067\uffbe\001\002\000\062\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\037\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\065\uffc6\067\uffc6\001\002\000\062\003\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\037\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\065\uffc0\067\uffc0\001\002\000\062\003\uffbd\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\037\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\065\uffbd\067\uffbd\001\002\000\062\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\037\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\065\uffc8\067\uffc8\001\002\000\004\036\264\001\002\000" +
    "\062\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\037\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\065\uffc1\067\uffc1\001\002\000" +
    "\004\036\253\001\002\000\054\003\142\004\020\005\012" +
    "\006\013\007\010\010\005\011\022\012\036\013\021\021" +
    "\034\022\141\025\152\026\164\027\137\030\163\031\136" +
    "\036\133\061\015\062\161\063\165\067\033\001\002\000" +
    "\004\036\166\001\002\000\004\061\170\001\002\000\004" +
    "\037\173\001\002\000\006\036\076\037\171\001\002\000" +
    "\004\040\172\001\002\000\062\003\uff8e\004\uff8e\005\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\021" +
    "\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e" +
    "\030\uff8e\031\uff8e\037\uff8e\061\uff8e\062\uff8e\063\uff8e\065" +
    "\uff8e\067\uff8e\001\002\000\004\040\174\001\002\000\062" +
    "\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\037\uff8d\061" +
    "\uff8d\062\uff8d\063\uff8d\065\uff8d\067\uff8d\001\002\000\004" +
    "\025\uff94\001\002\000\004\025\uff95\001\002\000\004\025" +
    "\200\001\002\000\004\034\201\001\002\000\022\014\203" +
    "\017\044\020\054\034\213\056\056\057\046\060\047\061" +
    "\204\001\002\000\004\035\252\001\002\000\022\014\203" +
    "\017\044\020\054\034\213\056\056\057\046\060\047\061" +
    "\204\001\002\000\044\015\uff67\016\uff67\033\uff67\034\075" +
    "\035\uff67\036\076\042\uff54\043\uff54\044\uff54\045\uff54\046" +
    "\uff54\047\uff54\050\uff54\051\uff54\052\uff54\053\uff54\054\uff54" +
    "\001\002\000\040\015\uff56\016\uff56\033\uff56\035\uff56\042" +
    "\uff56\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050\uff56" +
    "\051\uff56\052\uff56\053\uff56\054\uff56\001\002\000\012\015" +
    "\uff66\016\uff66\033\uff66\035\uff66\001\002\000\016\047\247" +
    "\050\245\051\243\052\246\053\241\054\244\001\002\000" +
    "\012\015\uff64\016\uff64\033\uff64\035\uff64\001\002\000\012" +
    "\015\uff68\016\uff68\033\uff68\035\uff68\001\002\000\040\015" +
    "\uff65\016\uff65\033\uff65\035\uff65\042\uff53\043\uff53\044\uff53" +
    "\045\uff53\046\uff53\047\uff53\050\uff53\051\uff53\052\uff53\053" +
    "\uff53\054\uff53\001\002\000\022\014\203\017\044\020\054" +
    "\034\213\056\056\057\046\060\047\061\204\001\002\000" +
    "\012\015\233\016\234\033\uff6d\035\uff6d\001\002\000\040" +
    "\015\uff5c\016\uff5c\033\uff5c\035\uff5c\042\220\043\222\044" +
    "\223\045\221\046\217\047\uff5c\050\uff5c\051\uff5c\052\uff5c" +
    "\053\uff5c\054\uff5c\001\002\000\040\015\uff55\016\uff55\033" +
    "\uff55\035\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046\uff55" +
    "\047\uff55\050\uff55\051\uff55\052\uff55\053\uff55\054\uff55\001" +
    "\002\000\012\056\056\057\046\060\047\061\225\001\002" +
    "\000\012\056\056\057\046\060\047\061\225\001\002\000" +
    "\012\056\056\057\046\060\047\061\225\001\002\000\012" +
    "\056\056\057\046\060\047\061\225\001\002\000\012\056" +
    "\056\057\046\060\047\061\225\001\002\000\040\015\uff53" +
    "\016\uff53\033\uff53\035\uff53\042\uff53\043\uff53\044\uff53\045" +
    "\uff53\046\uff53\047\uff53\050\uff53\051\uff53\052\uff53\053\uff53" +
    "\054\uff53\001\002\000\044\015\uff54\016\uff54\033\uff54\034" +
    "\075\035\uff54\036\076\042\uff54\043\uff54\044\uff54\045\uff54" +
    "\046\uff54\047\uff54\050\uff54\051\uff54\052\uff54\053\uff54\054" +
    "\uff54\001\002\000\040\015\uff5b\016\uff5b\033\uff5b\035\uff5b" +
    "\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\050" +
    "\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b\001\002\000\040" +
    "\015\uff5a\016\uff5a\033\uff5a\035\uff5a\042\uff5a\043\uff5a\044" +
    "\223\045\221\046\217\047\uff5a\050\uff5a\051\uff5a\052\uff5a" +
    "\053\uff5a\054\uff5a\001\002\000\040\015\uff59\016\uff59\033" +
    "\uff59\035\uff59\042\uff59\043\uff59\044\uff59\045\uff59\046\uff59" +
    "\047\uff59\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59\001" +
    "\002\000\040\015\uff57\016\uff57\033\uff57\035\uff57\042\uff57" +
    "\043\222\044\223\045\221\046\217\047\uff57\050\uff57\051" +
    "\uff57\052\uff57\053\uff57\054\uff57\001\002\000\040\015\uff58" +
    "\016\uff58\033\uff58\035\uff58\042\uff58\043\uff58\044\uff58\045" +
    "\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052\uff58\053\uff58" +
    "\054\uff58\001\002\000\022\014\203\017\044\020\054\034" +
    "\213\056\056\057\046\060\047\061\204\001\002\000\022" +
    "\014\203\017\044\020\054\034\213\056\056\057\046\060" +
    "\047\061\204\001\002\000\012\015\233\016\uff6b\033\uff6b" +
    "\035\uff6b\001\002\000\012\015\uff6c\016\uff6c\033\uff6c\035" +
    "\uff6c\001\002\000\010\015\233\016\234\035\240\001\002" +
    "\000\012\015\uff69\016\uff69\033\uff69\035\uff69\001\002\000" +
    "\012\056\uff5e\057\uff5e\060\uff5e\061\uff5e\001\002\000\012" +
    "\056\056\057\046\060\047\061\225\001\002\000\012\056" +
    "\uff61\057\uff61\060\uff61\061\uff61\001\002\000\012\056\uff5d" +
    "\057\uff5d\060\uff5d\061\uff5d\001\002\000\012\056\uff60\057" +
    "\uff60\060\uff60\061\uff60\001\002\000\012\056\uff62\057\uff62" +
    "\060\uff62\061\uff62\001\002\000\012\056\uff5f\057\uff5f\060" +
    "\uff5f\061\uff5f\001\002\000\012\015\uff63\016\uff63\033\uff63" +
    "\035\uff63\001\002\000\012\015\uff6a\016\uff6a\033\uff6a\035" +
    "\uff6a\001\002\000\062\003\uff96\004\uff96\005\uff96\006\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96" +
    "\031\uff96\037\uff96\061\uff96\062\uff96\063\uff96\065\uff96\067" +
    "\uff96\001\002\000\022\017\044\020\054\034\050\055\057" +
    "\056\056\057\046\060\047\061\051\001\002\000\004\040" +
    "\255\001\002\000\062\003\uff8c\004\uff8c\005\uff8c\006\uff8c" +
    "\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c" +
    "\031\uff8c\037\uff8c\061\uff8c\062\uff8c\063\uff8c\065\uff8c\067" +
    "\uff8c\001\002\000\006\032\261\037\262\001\002\000\006" +
    "\032\uff84\037\uff84\001\002\000\006\032\uff87\037\uff87\001" +
    "\002\000\022\017\044\020\054\034\050\055\057\056\056" +
    "\057\046\060\047\061\051\001\002\000\004\040\uff8a\001" +
    "\002\000\006\032\uff88\037\uff88\001\002\000\004\061\266" +
    "\001\002\000\004\037\271\001\002\000\006\036\076\037" +
    "\267\001\002\000\004\040\270\001\002\000\062\003\uff90" +
    "\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\013\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90" +
    "\026\uff90\027\uff90\030\uff90\031\uff90\037\uff90\061\uff90\062" +
    "\uff90\063\uff90\065\uff90\067\uff90\001\002\000\004\040\272" +
    "\001\002\000\062\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\037\uff8f\061\uff8f\062\uff8f\063\uff8f\065\uff8f\067\uff8f" +
    "\001\002\000\022\014\203\017\044\020\054\034\213\056" +
    "\056\057\046\060\047\061\204\001\002\000\004\035\275" +
    "\001\002\000\054\003\142\004\020\005\012\006\013\007" +
    "\010\010\005\011\022\012\036\013\021\021\034\022\141" +
    "\025\152\026\164\027\137\030\163\031\136\036\133\061" +
    "\015\062\161\063\165\067\033\001\002\000\062\003\uff97" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012" +
    "\uff97\013\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97" +
    "\026\uff97\027\uff97\030\uff97\031\uff97\037\uff97\061\uff97\062" +
    "\uff97\063\uff97\065\uff97\067\uff97\001\002\000\062\003\uff98" +
    "\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\013\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\027\uff98\030\uff98\031\uff98\037\uff98\061\uff98\062" +
    "\uff98\063\uff98\065\uff98\067\uff98\001\002\000\062\003\uff99" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\037\uff99\061\uff99\062" +
    "\uff99\063\uff99\065\uff99\067\uff99\001\002\000\006\032\uffb9" +
    "\040\uffb9\001\002\000\006\032\310\040\311\001\002\000" +
    "\022\017\044\020\054\034\050\055\057\056\056\057\046" +
    "\060\047\061\051\001\002\000\006\032\uffb8\040\uffb8\001" +
    "\002\000\010\032\uffb7\040\uffb7\041\306\001\002\000\022" +
    "\017\uffb5\020\uffb5\034\uffb5\055\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\001\002\000\006\032\uffb6\040\uffb6\001\002" +
    "\000\004\061\305\001\002\000\064\003\uffbb\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\037\uffbb\061\uffbb\062\uffbb\063\uffbb" +
    "\065\uffbb\066\uffbb\067\uffbb\001\002\000\006\032\uffba\040" +
    "\uffba\001\002\000\054\003\uffce\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\021\uffce\022" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\037\uffce" +
    "\061\uffce\062\uffce\063\uffce\067\uffce\001\002\000\064\002" +
    "\ufffe\003\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\021\ufffe\022\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031\ufffe\037\ufffe" +
    "\061\ufffe\062\ufffe\063\ufffe\065\ufffe\067\ufffe\001\002\000" +
    "\062\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\037\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\065\uffbc\067\uffbc\001\002\000" +
    "\022\014\203\017\044\020\054\034\213\056\056\057\046" +
    "\060\047\061\204\001\002\000\004\035\uffaa\001\002\000" +
    "\004\035\321\001\002\000\054\003\142\004\020\005\012" +
    "\006\013\007\010\010\005\011\022\012\036\013\021\021" +
    "\034\022\141\025\152\026\164\027\137\030\163\031\136" +
    "\036\133\061\015\062\161\063\165\067\033\001\002\000" +
    "\062\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\021\uff9e\022\uff9e\023\345\024" +
    "\343\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\037\uff9e" +
    "\061\uff9e\062\uff9e\063\uff9e\065\uff9e\067\uff9e\001\002\000" +
    "\062\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\021\uffa6\022\uffa6\023\331\024" +
    "\327\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\037\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\065\uffa6\067\uffa6\001\002\000" +
    "\062\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab" +
    "\011\uffab\012\uffab\013\uffab\021\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\037\uffab" +
    "\061\uffab\062\uffab\063\uffab\065\uffab\067\uffab\001\002\000" +
    "\062\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\037\uffac" +
    "\061\uffac\062\uffac\063\uffac\065\uffac\067\uffac\001\002\000" +
    "\062\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\037\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\065\uffa7\067\uffa7\001\002\000" +
    "\052\003\142\004\020\005\012\006\013\007\010\010\005" +
    "\011\022\012\036\013\021\021\034\022\141\025\152\026" +
    "\164\027\137\030\163\031\136\061\015\062\161\063\165" +
    "\067\033\001\002\000\062\003\uffa4\004\uffa4\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\037\uffa4\061\uffa4\062\uffa4\063\uffa4\065\uffa4" +
    "\067\uffa4\001\002\000\004\034\335\001\002\000\062\003" +
    "\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\021\uffa8\022\uffa8\023\331\024\327\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\037\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\065\uffa8\067\uffa8\001\002\000\062\003" +
    "\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\037\uffa9\061\uffa9" +
    "\062\uffa9\063\uffa9\065\uffa9\067\uffa9\001\002\000\062\003" +
    "\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5" +
    "\012\uffa5\013\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\037\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\065\uffa5\067\uffa5\001\002\000\022\014" +
    "\203\017\044\020\054\034\213\056\056\057\046\060\047" +
    "\061\204\001\002\000\004\035\337\001\002\000\052\003" +
    "\142\004\020\005\012\006\013\007\010\010\005\011\022" +
    "\012\036\013\021\021\034\022\141\025\152\026\164\027" +
    "\137\030\163\031\136\061\015\062\161\063\165\067\033" +
    "\001\002\000\062\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\021\uffa3\022\uffa3" +
    "\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\037\uffa3\061\uffa3\062\uffa3\063\uffa3\065\uffa3\067\uffa3" +
    "\001\002\000\062\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\037\uffa2\061\uffa2\062\uffa2\063\uffa2\065\uffa2\067\uffa2" +
    "\001\002\000\062\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\037\uff9f\061\uff9f\062\uff9f\063\uff9f\065\uff9f\067\uff9f" +
    "\001\002\000\004\036\133\001\002\000\062\003\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\031\uff9c\037\uff9c\061\uff9c\062\uff9c" +
    "\063\uff9c\065\uff9c\067\uff9c\001\002\000\004\034\351\001" +
    "\002\000\062\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\021\uffa0\022\uffa0\023" +
    "\345\024\343\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0" +
    "\037\uffa0\061\uffa0\062\uffa0\063\uffa0\065\uffa0\067\uffa0\001" +
    "\002\000\062\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\013\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\037\uffa1\061\uffa1\062\uffa1\063\uffa1\065\uffa1\067\uffa1\001" +
    "\002\000\062\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\013\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\037\uff9d\061\uff9d\062\uff9d\063\uff9d\065\uff9d\067\uff9d\001" +
    "\002\000\022\014\203\017\044\020\054\034\213\056\056" +
    "\057\046\060\047\061\204\001\002\000\004\035\353\001" +
    "\002\000\004\036\133\001\002\000\062\003\uff9b\004\uff9b" +
    "\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\037\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\065\uff9b\067\uff9b\001\002\000\062\003\uff9a\004\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\037\uff9a\061\uff9a\062\uff9a\063" +
    "\uff9a\065\uff9a\067\uff9a\001\002\000\004\061\360\001\002" +
    "\000\004\033\362\001\002\000\004\041\361\001\002\000" +
    "\022\017\uff7f\020\uff7f\034\uff7f\055\uff7f\056\uff7f\057\uff7f" +
    "\060\uff7f\061\uff7f\001\002\000\022\014\203\017\044\020" +
    "\054\034\213\056\056\057\046\060\047\061\204\001\002" +
    "\000\004\033\364\001\002\000\006\042\365\043\367\001" +
    "\002\000\004\056\uff83\001\002\000\004\056\370\001\002" +
    "\000\004\056\uff82\001\002\000\004\035\371\001\002\000" +
    "\054\003\142\004\020\005\012\006\013\007\010\010\005" +
    "\011\022\012\036\013\021\021\034\022\141\025\152\026" +
    "\164\027\137\030\163\031\136\036\133\061\015\062\161" +
    "\063\165\067\033\001\002\000\062\003\uff93\004\uff93\005" +
    "\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93" +
    "\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027" +
    "\uff93\030\uff93\031\uff93\037\uff93\061\uff93\062\uff93\063\uff93" +
    "\065\uff93\067\uff93\001\002\000\062\003\uff91\004\uff91\005" +
    "\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\037\uff91\061\uff91\062\uff91\063\uff91" +
    "\065\uff91\067\uff91\001\002\000\062\003\uff92\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92" +
    "\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\037\uff92\061\uff92\062\uff92\063\uff92" +
    "\065\uff92\067\uff92\001\002\000\022\017\044\020\054\034" +
    "\050\055\057\056\056\057\046\060\047\061\051\001\002" +
    "\000\004\040\377\001\002\000\062\003\uff8b\004\uff8b\005" +
    "\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\037\uff8b\061\uff8b\062\uff8b\063\uff8b" +
    "\065\uff8b\067\uff8b\001\002\000\006\032\uff85\037\uff85\001" +
    "\002\000\006\032\u0102\037\u0103\001\002\000\022\017\044" +
    "\020\054\034\050\055\057\056\056\057\046\060\047\061" +
    "\051\001\002\000\004\040\uff89\001\002\000\006\032\uff86" +
    "\037\uff86\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufffb\001\002\000\012\032\uffb7\034\ufff2\040\uffb7\041\306" +
    "\001\002\000\004\034\u010a\001\002\000\004\036\u0113\001" +
    "\002\000\026\004\020\005\012\006\013\007\010\010\005" +
    "\011\022\012\036\013\021\035\u010c\067\033\001\002\000" +
    "\006\032\uffd8\035\uffd8\001\002\000\004\036\uffdb\001\002" +
    "\000\004\061\u0112\001\002\000\006\032\u010f\035\u0110\001" +
    "\002\000\024\004\020\005\012\006\013\007\010\010\005" +
    "\011\022\012\036\013\021\067\033\001\002\000\004\036" +
    "\uffda\001\002\000\006\032\uffd9\035\uffd9\001\002\000\006" +
    "\032\uffd7\035\uffd7\001\002\000\056\003\u0118\004\020\005" +
    "\012\006\013\007\010\010\005\011\022\012\036\013\021" +
    "\021\034\022\141\025\152\026\164\027\137\030\163\031" +
    "\136\037\u011c\061\015\062\161\063\165\065\u0117\067\033" +
    "\001\002\000\032\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\021\ufff1\061\ufff1\066\ufff1" +
    "\067\ufff1\001\002\000\032\003\uffee\022\uffee\025\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\037\uffee\061\uffee\062\uffee" +
    "\063\uffee\065\uffee\001\002\000\032\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\021\uffcf" +
    "\037\uffcf\066\uffcf\067\uffcf\001\002\000\022\017\044\020" +
    "\054\034\050\055\057\056\056\057\046\060\047\061\051" +
    "\001\002\000\004\040\u0131\001\002\000\032\003\uffe9\022" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\037\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\065\uffe9\001\002\000\032\003" +
    "\uffea\022\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\037\uffea\061\uffea\062\uffea\063\uffea\065\uffea\001\002\000" +
    "\032\003\uffe5\022\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\037\uffe5\061\uffe5\062\uffe5\063\uffe5\065\uffe5\001" +
    "\002\000\032\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\021\uffd3\061\uffd3\066\uffd3\067" +
    "\uffd3\001\002\000\032\003\uffec\022\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\037\uffec\061\uffec\062\uffec\063" +
    "\uffec\065\uffec\001\002\000\032\003\uffe8\022\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\037\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\065\uffe8\001\002\000\032\003\uffed\022\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\037\uffed\061" +
    "\uffed\062\uffed\063\uffed\065\uffed\001\002\000\032\003\uffef" +
    "\022\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\037" +
    "\uffef\061\uffef\062\uffef\063\uffef\065\uffef\001\002\000\032" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\021\uffd1\037\uffd1\066\uffd1\067\uffd1\001\002" +
    "\000\032\003\uffe4\022\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\037\uffe4\061\uffe4\062\uffe4\063\uffe4\065\uffe4" +
    "\001\002\000\032\003\uffeb\022\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\037\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\065\uffeb\001\002\000\032\003\uffe6\022\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\037\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\065\uffe6\001\002\000\032\003\uffe3\022\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\037\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\065\uffe3\001\002\000\032\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\021\uffd0\037\uffd0\066\uffd0\067\uffd0\001\002\000\032\003" +
    "\u0118\022\141\025\152\026\164\027\137\030\163\031\136" +
    "\037\u0130\061\015\062\161\063\165\065\u0117\001\002\000" +
    "\032\003\uffe7\022\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\037\uffe7\061\uffe7\062\uffe7\063\uffe7\065\uffe7\001" +
    "\002\000\032\004\020\005\012\006\013\007\010\010\005" +
    "\011\022\012\036\013\021\021\034\037\u012c\066\u012a\067" +
    "\033\001\002\000\030\003\u0118\022\141\025\152\026\164" +
    "\027\137\030\163\031\136\061\015\062\161\063\165\065" +
    "\u0117\001\002\000\032\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\021\uffd2\037\uffd2\066" +
    "\uffd2\067\uffd2\001\002\000\032\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\021\uffd5\061" +
    "\uffd5\066\uffd5\067\uffd5\001\002\000\032\003\u0118\022\141" +
    "\025\152\026\164\027\137\030\163\031\136\037\u012e\061" +
    "\015\062\161\063\165\065\u0117\001\002\000\032\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\021\uffd6\061\uffd6\066\uffd6\067\uffd6\001\002\000\032" +
    "\003\ufff0\022\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\037\ufff0\061\ufff0\062\ufff0\063\ufff0\065\ufff0\001\002" +
    "\000\032\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\021\uffd4\061\uffd4\066\uffd4\067\uffd4" +
    "\001\002\000\032\003\uffe2\022\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\037\uffe2\061\uffe2\062\uffe2\063\uffe2" +
    "\065\uffe2\001\002\000\004\040\u0133\001\002\000\032\003" +
    "\uffdc\022\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\037\uffdc\061\uffdc\062\uffdc\063\uffdc\065\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0131\000\036\004\010\012\022\013\016\014\030\015" +
    "\031\017\005\020\027\022\025\024\003\031\034\032\036" +
    "\033\013\070\006\106\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\302\023\303" +
    "\025\300\026\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\071\036\073\001\001\000\004\012\u0105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\032\042\071\051\072\041\073\125\074\054\075\052\113" +
    "\040\001\001\000\030\004\010\015\123\017\005\020\027" +
    "\022\025\024\003\031\034\032\036\033\013\070\006\106" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\032\042\071\051\072\041\073\044" +
    "\074\054\075\052\113\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\032" +
    "\042\071\051\072\041\075\110\113\040\001\001\000\010" +
    "\035\071\036\073\114\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\032\042\071\051\072" +
    "\041\075\070\113\040\001\001\000\014\032\042\071\051" +
    "\072\041\075\067\113\040\001\001\000\014\032\042\071" +
    "\051\072\041\075\066\113\040\001\001\000\014\032\042" +
    "\071\051\072\041\075\065\113\040\001\001\000\014\032" +
    "\042\071\051\072\041\075\064\113\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\032\042\071\051\072" +
    "\041\074\102\075\052\113\040\115\100\001\001\000\016" +
    "\032\042\071\051\072\041\074\076\075\052\113\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\032\042\071" +
    "\051\072\041\074\105\075\052\113\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\114\036\073\001\001\000\006\034\115\036" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\116" +
    "\131\001\001\000\004\006\133\001\001\000\046\003\137" +
    "\004\157\005\142\020\027\022\025\024\150\031\154\032" +
    "\036\033\134\037\144\051\143\054\152\056\161\060\155" +
    "\061\145\070\147\104\153\105\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\375\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\312\004\157\020\027\022\025\024\150" +
    "\031\154\032\036\033\134\037\144\051\143\054\152\056" +
    "\161\060\155\061\145\070\147\104\153\105\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\302\023\303\025\300\026\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\253\001\001\000\050\003\175" +
    "\004\157\006\174\020\027\022\025\024\150\031\154\032" +
    "\036\033\134\037\144\051\143\054\152\056\161\057\176" +
    "\060\155\061\145\070\147\104\153\105\156\001\001\000" +
    "\002\001\001\000\004\032\166\001\001\000\002\001\001" +
    "\000\006\035\071\036\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\032\215\071\204\072\205\076\201\077\213" +
    "\100\210\101\207\102\206\103\214\113\211\001\001\000" +
    "\002\001\001\000\024\032\215\071\204\072\205\077\250" +
    "\100\210\101\207\102\206\103\214\113\211\001\001\000" +
    "\010\035\071\036\073\114\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\032\215" +
    "\071\204\072\205\077\236\100\210\101\207\102\206\103" +
    "\214\113\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\215\071\204\103\231\113" +
    "\223\001\001\000\012\032\215\071\204\103\230\113\223" +
    "\001\001\000\012\032\215\071\204\103\227\113\223\001" +
    "\001\000\012\032\215\071\204\103\226\113\223\001\001" +
    "\000\012\032\215\071\204\103\225\113\223\001\001\000" +
    "\002\001\001\000\010\035\071\036\073\114\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\032\215\071\204" +
    "\072\205\077\235\100\210\101\207\102\206\103\214\113" +
    "\211\001\001\000\024\032\215\071\204\072\205\077\234" +
    "\100\210\101\207\102\206\103\214\113\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\032\215\071\204\102" +
    "\247\103\214\113\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\032\042\064\257\065\255\071\051\072\041\074" +
    "\256\075\052\113\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\032\042\064\262\071\051\072\041\074\256" +
    "\075\052\113\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\264\001\001\000\002\001\001\000\006" +
    "\035\071\036\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\032\215" +
    "\071\204\072\205\076\273\077\213\100\210\101\207\102" +
    "\206\103\214\113\211\001\001\000\002\001\001\000\050" +
    "\003\276\004\157\006\275\020\027\022\025\024\150\031" +
    "\154\032\036\033\134\037\144\051\143\052\277\054\152" +
    "\056\161\060\155\061\145\070\147\104\153\105\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\032\042\071" +
    "\051\072\041\073\306\074\054\075\052\113\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\302\023\303\025\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\032\215\040\317" +
    "\071\204\072\205\076\316\077\213\100\210\101\207\102" +
    "\206\103\214\113\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\322\004\157\006\321\020\027\022" +
    "\025\024\150\031\154\032\036\033\134\037\144\041\324" +
    "\045\323\051\143\054\152\056\161\060\155\061\145\070" +
    "\147\104\153\105\156\001\001\000\010\046\345\047\343" +
    "\050\341\001\001\000\010\042\331\043\327\044\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\340\004\157\020\027\022\025\024\150\031" +
    "\154\032\036\033\134\037\144\051\143\054\152\056\161" +
    "\060\155\061\145\070\147\104\153\105\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\043\333\044\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\032" +
    "\215\071\204\072\205\076\335\077\213\100\210\101\207" +
    "\102\206\103\214\113\211\001\001\000\002\001\001\000" +
    "\044\003\337\004\157\020\027\022\025\024\150\031\154" +
    "\032\036\033\134\037\144\051\143\054\152\056\161\060" +
    "\155\061\145\070\147\104\153\105\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\347\050\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\032\215\071\204\072\205\076\351\077\213" +
    "\100\210\101\207\102\206\103\214\113\211\001\001\000" +
    "\002\001\001\000\004\006\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\027\022\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\032\215\071\204\072\205\076\362\077\213\100\210\101" +
    "\207\102\206\103\214\113\211\001\001\000\002\001\001" +
    "\000\004\053\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\373" +
    "\004\157\006\372\020\027\022\025\024\150\031\154\032" +
    "\036\033\134\037\144\051\143\054\152\055\371\056\161" +
    "\060\155\061\145\070\147\104\153\105\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\032\042\064\377\066\u0100\071\051\072\041\074\256\075" +
    "\052\113\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\032\042\064" +
    "\u0103\071\051\072\041\074\256\075\052\113\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\117\u0107\001\001\000\004\110\u0108" +
    "\001\001\000\004\016\u0113\001\001\000\010\070\u010c\107" +
    "\u010d\111\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\070\u010c\111" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\004\u0125\007\u0126\010\u011f\011\u011e\020" +
    "\027\022\025\024\u011c\027\u0128\030\u0120\031\u0122\032\036" +
    "\033\u0115\037\u0119\051\u0118\054\u011d\056\u0127\060\u0123\061" +
    "\u011a\070\147\104\u0121\105\u0124\112\u0114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\032" +
    "\042\071\051\072\041\074\u0131\075\052\113\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\010\u012e\011" +
    "\u011e\020\027\022\025\024\u011c\031\u0122\032\036\037\u0119" +
    "\051\u0118\054\u011d\056\u0127\060\u0123\061\u011a\104\u0121\105" +
    "\u0124\112\u0114\001\001\000\002\001\001\000\012\004\u0125" +
    "\030\u012a\033\u0115\070\147\001\001\000\044\007\u012c\010" +
    "\u011f\011\u011e\020\027\022\025\024\u011c\031\u0122\032\036" +
    "\037\u0119\051\u0118\054\u011d\056\u0127\060\u0123\061\u011a\104" +
    "\u0121\105\u0124\112\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\010\u012e\011\u011e\020\027\022\025\024" +
    "\u011c\031\u0122\032\036\037\u0119\051\u0118\054\u011d\056\u0127" +
    "\060\u0123\061\u011a\104\u0121\105\u0124\112\u0114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private ManejadorParser mp = null;

	// Connect this parser to a scanner!
	public parser(Lexer1 lex, ManejadorParser mp) {
		super(lex);
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
            //mp.printSintaxError("¡Error de sintaxis! -> "+ s.value +" Linea "+(s.left)+" columna "+(s.right) + "\n");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= globalInstruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto start_val = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= instructions 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.print(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.print(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block ::= OPEN_SQR instructions CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // block ::= OPEN_SQR CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // globalInstruction ::= bodyInstruction SEPARATOR mainInstruction 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalInstruction",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // globalInstruction ::= SEPARATOR mainInstruction 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalInstruction",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // globalInstruction ::= mainInstruction 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalInstruction",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // globalInstruction ::= error 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("No se ha encontrado el main");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalInstruction",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
mp.setSubprogramaActual(e1);mp.setGlobal(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mainInstruction ::= MAIN OPEN_BRK CLOSE_BRK NT$0 block 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		mp.setGlobal(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainInstruction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bodyInstruction ::= bodyInstruction bodyInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyInstruction",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bodyInstruction ::= bodyInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyInstruction",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bodyInstructionA ::= subprogram 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyInstructionA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bodyInstructionA ::= instructionB 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyInstructionA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
mp.setSubprogramaActual(e2); mp.setGlobal(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // subprogram ::= tipo VARIABLE NT$1 parametrosA bodySubprogram 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e4 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.setGlobal(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programInstruction ::= programInstruction programInstructionA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programInstruction ::= programInstructionA 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstruction",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programInstructionA ::= rtrn 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programInstructionA ::= programInstructionB 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programInstructionB ::= formalAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // programInstructionB ::= arrayAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // programInstructionB ::= if 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // programInstructionB ::= while 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // programInstructionB ::= for 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // programInstructionB ::= doWhile 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // programInstructionB ::= print 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // programInstructionB ::= println 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // programInstructionB ::= scans 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // programInstructionB ::= scann 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // programInstructionB ::= error SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subprogramCall ::= VARIABLE paramsA SEMICOLON 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramCall",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramsA ::= OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsA",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramsA ::= OPEN_BRK paramsProgram CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsA",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramsProgram ::= paramsProgram COMMA opNum 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsProgram",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramsProgram ::= opNum 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsProgram",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rtrn ::= RETURN opNum SEMICOLON 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rtrn",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametrosA ::= OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosA",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametrosA ::= OPEN_BRK parametros CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosA",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= parametros COMMA parametro 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= parametro 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametro ::= tipo VARIABLE 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bodySubprogram ::= OPEN_SQR declns SEPARATOR programInstruction CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodySubprogram",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bodySubprogram ::= OPEN_SQR declns CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodySubprogram",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bodySubprogram ::= OPEN_SQR programInstruction CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodySubprogram",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bodySubprogram ::= OPEN_SQR CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodySubprogram",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declns ::= declns declns1 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declns",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declns ::= declns1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declns",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declns1 ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declns1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declns1 ::= array 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declns1",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instructions ::= instructions instruction 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getInstructions(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instructions ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instructionB ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instructionB ::= formalAssign 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instructionB ::= arrayAssign 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instructionB ::= array 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionB",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruction ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruction ::= formalAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruction ::= arrayAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruction ::= array 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruction ::= if 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruction ::= while 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruction ::= for 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruction ::= doWhile 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruction ::= print 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruction ::= println 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruction ::= scans 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruction ::= scann 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instruction ::= error SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // decl ::= tipo decls SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // decls ::= decls COMMA decl1 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // decls ::= decl1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // decl1 ::= assign2 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // decl1 ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assign2 ::= assign3 exp 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign2",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assign3 ::= VARIABLE ASSIGN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign3",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arrayDim ::= arrayDim arrayDim1 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDim",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arrayDim ::= arrayDim1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDim",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arrayDim1 ::= OPEN_SQR opNum CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDim1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // array ::= ARRAY tipo arrayDim assignA SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assignA ::= assignA COMMA VARIABLE 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assignA ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignA",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arrayAssign ::= arrayPosition ASSIGN exp SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mp.setArrayAsign(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAssign",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // arrayPosition ::= VARIABLE arrayDim 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayPosition",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if ::= IF OPEN_BRK if1 CLOSE_BRK ifA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if ::= IF OPEN_BRK if1 CLOSE_BRK ifB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if1 ::= opBol 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ifA ::= instruction elseifA elseA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ifA ::= instruction elseifA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ifA ::= instruction elseA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ifA ::= instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // elseifA ::= elseifA elseifAA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // elseifA ::= elseifAA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // elseifAA ::= ELSIF OPEN_BRK opBol CLOSE_BRK instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifAA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // elseA ::= ELSE instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ifB ::= block elseifB elseB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifB",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ifB ::= block elseifB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifB",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ifB ::= block elseB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifB",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ifB ::= block 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifB",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // elseifB ::= elseifB elseifBB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // elseifB ::= elseifBB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // elseifBB ::= ELSIF OPEN_BRK opBol CLOSE_BRK block 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifBB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // elseB ::= ELSE block 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // while ::= WHILE OPEN_BRK opBol CLOSE_BRK whileA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.whileOperacion(e1,e2,e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // whileA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileA",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // whileA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileA",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // doWhile ::= DO doWhileA WHILE OPEN_BRK opBol CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mp.doWhileOperacion(e1,e2,e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhile",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // doWhileA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileA",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // doWhileA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileA",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // for ::= FOR OPEN_BRK assign COLON opBol COLON signo NUM_INTEGER CLOSE_BRK forA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e5 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.forOperacion(e1,e2,e3,e4,e5, e4left, e4right);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // forA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forA",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // forA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forA",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // scans ::= SCANS OPEN_SQR VARIABLE CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scans",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // scans ::= SCANS OPEN_SQR arrayPosition CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scans",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // scann ::= SCANN OPEN_SQR VARIABLE CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scann",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // scann ::= SCANN OPEN_SQR arrayPosition CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scann",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // print ::= PRINT printA SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // println ::= PRINTLN printB SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("println",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // printA ::= OPEN_SQR valueA CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printA",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // printB ::= OPEN_SQR valueB CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printB",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valueA ::= valueA COMMA value 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getPrint(e1,e2,ManejadorParser.PRINT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueA",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valueA ::= value 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimplePrint(e,ManejadorParser.PRINT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueA",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valueB ::= valueB COMMA value 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getPrint(e1,e2,ManejadorParser.PRINTLN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueB",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valueB ::= value 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimplePrint(e,ManejadorParser.PRINTLN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueB",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // value ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // signo ::= PLUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // signo ::= MINUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // formalAssign ::= assign SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalAssign",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // assign ::= assign1 exp 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.asignByToken(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // assign1 ::= VARIABLE ASSIGN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // exp ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // opNum ::= e 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.orderOpNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opNum",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // e ::= e MULTI e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getMulti(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // e ::= e MINUS e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getResta(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // e ::= e DIVISION e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getDivision(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // e ::= e MODULE e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getModulo(e1,e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // e ::= e PLUS e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSumaConcatenacion(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // e ::= OPEN_BRK e CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // e ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // e ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // e ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getVariable(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // e ::= TEXT 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoString(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // e ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoBool(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // e ::= subprogramCall 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // num ::= NUM_INTEGER 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolEntero(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // num ::= NUM_FLOAT 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolFloat(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // num ::= NUM_DOUBLE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolDouble(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // opBol ::= b 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opBol",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // b ::= b AND b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getAnd(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // b ::= b OR b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getOr(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // b ::= NOT b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getNot(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // b ::= OPEN_BRK b CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // b ::= opRel 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // b ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getVariableRel(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // b ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getBool(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // b ::= subprogramCall 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // opRel ::= r 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // r ::= expRel rel expRel 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getRelacion(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // rel ::= HIGHER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // rel ::= LOWER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // rel ::= HIGHER_EQ 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // rel ::= LOWER_EQ 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // rel ::= NOT_EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // rel ::= EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expRel ::= er 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.orderOpNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // er ::= er MULTI er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getMulti(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // er ::= er MINUS er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getResta(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // er ::= er DIVISION er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getDivision(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // er ::= er MODULE er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getModulo(e1,e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // er ::= er PLUS er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSumaConcatenacion(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // er ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // er ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // er ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getVariable(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // er ::= subprogramCall 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // bool ::= TRUE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolBoolean(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // bool ::= FALSE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolBoolean(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // tipo ::= BYTE 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // tipo ::= LONG 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // tipo ::= DOUBLE 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // tipo ::= VOID 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
