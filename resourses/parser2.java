
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo3d.backend.analizadores;

import java_cup.runtime.*;
import codigo3d.backend.manejadores.*;
import codigo3d.backend.objetos.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\336\000\002\002\004\000\002\012\005\000\002\012" +
    "\004\000\002\012\003\000\002\117\002\000\002\011\007" +
    "\000\002\011\005\000\002\011\003\000\002\120\002\000" +
    "\002\011\005\000\002\005\005\000\002\005\004\000\002" +
    "\013\004\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\121\002\000\002\107\007\000\002\006\004" +
    "\000\002\006\003\000\002\007\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\122\002\000\002\010\005\000\002\114\004\000" +
    "\002\116\004\000\002\116\005\000\002\115\005\000\002" +
    "\115\003\000\002\123\002\000\002\115\005\000\002\113" +
    "\005\000\002\111\004\000\002\111\005\000\002\124\002" +
    "\000\002\111\005\000\002\110\005\000\002\110\003\000" +
    "\002\112\004\000\002\125\002\000\002\112\005\000\002" +
    "\015\007\000\002\015\005\000\002\015\005\000\002\015" +
    "\004\000\002\126\002\000\002\015\005\000\002\026\004" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\004\004\000\002\004\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\127" +
    "\002\000\002\002\005\000\002\003\005\000\002\025\005" +
    "\000\002\025\003\000\002\024\003\000\002\024\003\000" +
    "\002\021\004\000\002\130\002\000\002\021\005\000\002" +
    "\022\004\000\002\131\002\000\002\022\005\000\002\035" +
    "\004\000\002\035\003\000\002\034\005\000\002\132\002" +
    "\000\002\034\005\000\002\036\004\000\002\036\003\000" +
    "\002\037\005\000\002\133\002\000\002\037\005\000\002" +
    "\032\007\000\002\033\005\000\002\033\003\000\002\134" +
    "\002\000\002\033\005\000\002\030\006\000\002\031\004" +
    "\000\002\135\002\000\002\031\005\000\002\040\004\000" +
    "\002\040\003\000\002\041\007\000\002\042\003\000\002" +
    "\042\003\000\002\043\004\000\002\043\003\000\002\043" +
    "\003\000\002\044\004\000\002\044\003\000\002\045\007" +
    "\000\002\046\003\000\002\046\003\000\002\047\004\000" +
    "\002\050\007\000\002\051\003\000\002\051\003\000\002" +
    "\055\010\000\002\056\003\000\002\056\003\000\002\053" +
    "\014\000\002\054\003\000\002\054\003\000\002\105\007" +
    "\000\002\105\007\000\002\106\007\000\002\106\007\000" +
    "\002\057\005\000\002\060\005\000\002\061\005\000\002" +
    "\062\005\000\002\064\005\000\002\064\003\000\002\065" +
    "\005\000\002\065\003\000\002\063\003\000\002\052\003" +
    "\000\002\052\003\000\002\023\004\000\002\020\004\000" +
    "\002\017\004\000\002\072\003\000\002\073\003\000\002" +
    "\075\005\000\002\075\005\000\002\075\005\000\002\075" +
    "\005\000\002\075\005\000\002\075\005\000\002\075\003" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\074\003\000\002" +
    "\076\005\000\002\076\005\000\002\076\005\000\002\076" +
    "\005\000\002\076\005\000\002\076\005\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\076\003\000\002\070\003\000\002" +
    "\070\003\000\002\070\003\000\002\077\003\000\002\100" +
    "\005\000\002\100\005\000\002\100\004\000\002\100\005" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\101\003\000\002\102\005\000\002" +
    "\102\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\103\003\000\002\104\005\000\002\104\005\000" +
    "\002\104\005\000\002\104\005\000\002\104\005\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\071\003\000\002\071\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\036\003\027\004\020\005\013\006\012\007" +
    "\010\010\005\011\022\012\037\013\021\021\033\061\015" +
    "\064\025\066\016\067\034\001\002\000\034\003\uffc1\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\021\uffc1\061\uffc1\066\uffc1\067\uffc1\001\002\000" +
    "\010\003\uff28\036\uff28\061\uff28\001\002\000\034\003\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\021\ufff2\061\ufff2\066\ufff2\067\ufff2\001\002" +
    "\000\006\003\361\061\u0132\001\002\000\010\003\uff29\036" +
    "\uff29\061\uff29\001\002\000\034\003\uffc2\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\021" +
    "\uffc2\061\uffc2\066\uffc2\067\uffc2\001\002\000\010\003\uff2a" +
    "\036\uff2a\061\uff2a\001\002\000\010\003\uff2b\036\uff2b\061" +
    "\uff2b\001\002\000\034\003\uffbf\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\021\uffbf\061" +
    "\uffbf\066\uffbf\067\uffbf\001\002\000\010\003\100\036\101" +
    "\041\u010d\001\002\000\006\003\174\064\025\001\002\000" +
    "\004\002\u0130\001\002\000\010\003\uff2c\036\uff2c\061\uff2c" +
    "\001\002\000\010\003\uff25\036\uff25\061\uff25\001\002\000" +
    "\010\003\uff27\036\uff27\061\uff27\001\002\000\004\002\ufffe" +
    "\001\002\000\034\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\021\ufff3\061\ufff3" +
    "\066\ufff3\067\ufff3\001\002\000\006\002\ufffa\034\202\001" +
    "\002\000\004\040\201\001\002\000\006\035\ufff9\037\uff93" +
    "\001\002\000\024\003\056\017\046\020\053\034\050\055" +
    "\060\056\057\057\045\060\047\061\051\001\002\000\034" +
    "\003\056\004\020\005\013\006\012\007\010\010\005\011" +
    "\022\012\037\013\021\021\033\061\015\066\172\067\034" +
    "\001\002\000\034\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\021\ufff4\061\ufff4" +
    "\066\ufff4\067\ufff4\001\002\000\024\004\020\005\013\006" +
    "\012\007\010\010\005\011\022\012\037\013\021\067\034" +
    "\001\002\000\010\003\uff24\036\uff24\061\uff24\001\002\000" +
    "\034\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\021\uffc0\061\uffc0\066\uffc0\067" +
    "\uffc0\001\002\000\004\041\040\001\002\000\010\003\uff26" +
    "\036\uff26\061\uff26\001\002\000\024\003\056\017\046\020" +
    "\053\034\050\055\060\056\057\057\045\060\047\061\051" +
    "\001\002\000\026\032\uff5b\033\uff5b\035\uff5b\037\uff5b\040" +
    "\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046\uff5b\001\002" +
    "\000\026\032\uff5c\033\uff5c\035\uff5c\037\uff5c\040\uff5c\042" +
    "\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\001\002\000\026" +
    "\032\uff5f\033\uff5f\035\uff5f\037\uff5f\040\uff5f\042\uff5f\043" +
    "\uff5f\044\uff5f\045\uff5f\046\uff5f\001\002\000\004\040\123" +
    "\001\002\000\046\015\uff4b\016\uff4b\032\uff4b\033\uff4b\035" +
    "\uff4b\037\uff4b\040\uff4b\042\uff4b\043\uff4b\044\uff4b\045\uff4b" +
    "\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054" +
    "\uff4b\001\002\000\032\015\uff2e\016\uff2e\032\uff2e\033\uff2e" +
    "\035\uff2e\037\uff2e\040\uff2e\042\uff2e\043\uff2e\044\uff2e\045" +
    "\uff2e\046\uff2e\001\002\000\046\015\uff4c\016\uff4c\032\uff4c" +
    "\033\uff4c\035\uff4c\037\uff4c\040\uff4c\042\uff4c\043\uff4c\044" +
    "\uff4c\045\uff4c\046\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c" +
    "\053\uff4c\054\uff4c\001\002\000\024\003\056\017\046\020" +
    "\053\034\050\055\060\056\057\057\045\060\047\061\051" +
    "\001\002\000\034\003\100\032\uff5e\033\uff5e\034\102\035" +
    "\uff5e\036\101\037\uff5e\040\uff5e\042\uff5e\043\uff5e\044\uff5e" +
    "\045\uff5e\046\uff5e\001\002\000\026\032\uff60\033\uff60\035" +
    "\uff60\037\uff60\040\uff60\042\uff60\043\uff60\044\uff60\045\uff60" +
    "\046\uff60\001\002\000\032\015\uff2d\016\uff2d\032\uff2d\033" +
    "\uff2d\035\uff2d\037\uff2d\040\uff2d\042\uff2d\043\uff2d\044\uff2d" +
    "\045\uff2d\046\uff2d\001\002\000\010\032\uff68\033\uff68\040" +
    "\uff68\001\002\000\026\032\uff67\033\uff67\035\uff67\037\uff67" +
    "\040\uff67\042\064\043\066\044\067\045\065\046\063\001" +
    "\002\000\004\037\uff93\001\002\000\046\015\uff4d\016\uff4d" +
    "\032\uff4d\033\uff4d\035\uff4d\037\uff4d\040\uff4d\042\uff4d\043" +
    "\uff4d\044\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d" +
    "\052\uff4d\053\uff4d\054\uff4d\001\002\000\026\032\uff5d\033" +
    "\uff5d\035\uff5d\037\uff5d\040\uff5d\042\uff5d\043\uff5d\044\uff5d" +
    "\045\uff5d\046\uff5d\001\002\000\004\037\062\001\002\000" +
    "\050\015\uff92\016\uff92\032\uff92\033\uff92\035\uff92\037\uff92" +
    "\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046" +
    "\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\001\002\000\024\003\056\017\046\020\053\034\050\055" +
    "\060\056\057\057\045\060\047\061\051\001\002\000\024" +
    "\003\056\017\046\020\053\034\050\055\060\056\057\057" +
    "\045\060\047\061\051\001\002\000\024\003\056\017\046" +
    "\020\053\034\050\055\060\056\057\057\045\060\047\061" +
    "\051\001\002\000\024\003\056\017\046\020\053\034\050" +
    "\055\060\056\057\057\045\060\047\061\051\001\002\000" +
    "\024\003\056\017\046\020\053\034\050\055\060\056\057" +
    "\057\045\060\047\061\051\001\002\000\026\032\uff66\033" +
    "\uff66\035\uff66\037\uff66\040\uff66\042\uff66\043\uff66\044\uff66" +
    "\045\uff66\046\uff66\001\002\000\026\032\uff65\033\uff65\035" +
    "\uff65\037\uff65\040\uff65\042\uff65\043\uff65\044\067\045\065" +
    "\046\063\001\002\000\026\032\uff64\033\uff64\035\uff64\037" +
    "\uff64\040\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64" +
    "\001\002\000\026\032\uff62\033\uff62\035\uff62\037\uff62\040" +
    "\uff62\042\uff62\043\066\044\067\045\065\046\063\001\002" +
    "\000\026\032\uff63\033\uff63\035\uff63\037\uff63\040\uff63\042" +
    "\uff63\043\uff63\044\uff63\045\uff63\046\uff63\001\002\000\046" +
    "\015\uffdf\016\uffdf\032\uffdf\033\uffdf\035\uffdf\037\uffdf\040" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\001\002\000" +
    "\054\003\100\015\uff94\016\uff94\032\uff94\033\uff94\035\uff94" +
    "\036\101\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\054\uff94\001\002\000\054\003\uffa3\015\uffa3\016" +
    "\uffa3\032\uffa3\033\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\001\002" +
    "\000\004\037\uffa1\001\002\000\024\003\056\017\046\020" +
    "\053\034\050\055\060\056\057\057\045\060\047\061\051" +
    "\001\002\000\026\003\106\017\046\020\053\034\050\035" +
    "\104\055\060\056\057\057\045\060\047\061\051\001\002" +
    "\000\006\032\111\035\112\001\002\000\046\015\uffde\016" +
    "\uffde\032\uffde\033\uffde\035\uffde\037\uffde\040\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\001\002\000\006\032\uffdb" +
    "\035\uffdb\001\002\000\026\003\uffda\017\uffda\020\uffda\034" +
    "\uffda\037\uff93\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\001\002\000\024\003\056\017\046\020\053\034\050\055" +
    "\060\056\057\057\045\060\047\061\051\001\002\000\006" +
    "\032\uffd9\035\uffd9\001\002\000\024\003\056\017\046\020" +
    "\053\034\050\055\060\056\057\057\045\060\047\061\051" +
    "\001\002\000\046\015\uffdd\016\uffdd\032\uffdd\033\uffdd\035" +
    "\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\001\002\000\006\032\uffdc\035\uffdc\001\002\000\004" +
    "\037\115\001\002\000\054\003\uffa2\015\uffa2\016\uffa2\032" +
    "\uffa2\033\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\001\002\000\004" +
    "\037\117\001\002\000\054\003\uffa0\015\uffa0\016\uffa0\032" +
    "\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\001\002\000\054" +
    "\003\uffa4\015\uffa4\016\uffa4\032\uffa4\033\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\001\002\000\016\035\122\042\064\043\066" +
    "\044\067\045\065\046\063\001\002\000\026\032\uff61\033" +
    "\uff61\035\uff61\037\uff61\040\uff61\042\uff61\043\uff61\044\uff61" +
    "\045\uff61\046\uff61\001\002\000\064\003\uff95\004\uff95\005" +
    "\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\037\uff95\061\uff95\062\uff95\063\uff95" +
    "\065\uff95\066\uff95\067\uff95\001\002\000\006\003\125\036" +
    "\126\001\002\000\004\037\uff9c\001\002\000\024\003\056" +
    "\017\046\020\053\034\151\055\154\056\057\057\045\060" +
    "\047\061\152\001\002\000\010\003\132\036\126\061\134" +
    "\001\002\000\010\003\uff9e\036\uff9e\061\uff9e\001\002\000" +
    "\006\032\141\040\142\001\002\000\006\037\uff9c\061\uff97" +
    "\001\002\000\010\003\uff9f\036\uff9f\061\uff9f\001\002\000" +
    "\006\032\uff98\040\uff98\001\002\000\004\061\140\001\002" +
    "\000\004\037\137\001\002\000\010\003\uff9b\036\uff9b\061" +
    "\uff9b\001\002\000\006\032\uff96\040\uff96\001\002\000\004" +
    "\061\143\001\002\000\064\003\uff9a\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\037\uff9a\061\uff9a\062\uff9a\063\uff9a\065\uff9a" +
    "\066\uff9a\067\uff9a\001\002\000\006\032\uff99\040\uff99\001" +
    "\002\000\020\035\uff4e\037\uff4e\042\uff4e\043\uff4e\044\uff4e" +
    "\045\uff4e\046\uff4e\001\002\000\016\037\uff5a\042\157\043" +
    "\160\044\162\045\161\046\156\001\002\000\020\035\uff4f" +
    "\037\uff4f\042\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f\001" +
    "\002\000\020\035\uff52\037\uff52\042\uff52\043\uff52\044\uff52" +
    "\045\uff52\046\uff52\001\002\000\004\037\171\001\002\000" +
    "\024\003\056\017\046\020\053\034\151\055\154\056\057" +
    "\057\045\060\047\061\152\001\002\000\026\003\100\034" +
    "\102\035\uff51\036\101\037\uff51\042\uff51\043\uff51\044\uff51" +
    "\045\uff51\046\uff51\001\002\000\020\035\uff53\037\uff53\042" +
    "\uff53\043\uff53\044\uff53\045\uff53\046\uff53\001\002\000\020" +
    "\035\uff50\037\uff50\042\uff50\043\uff50\044\uff50\045\uff50\046" +
    "\uff50\001\002\000\016\035\163\042\157\043\160\044\162" +
    "\045\161\046\156\001\002\000\024\003\056\017\046\020" +
    "\053\034\151\055\154\056\057\057\045\060\047\061\152" +
    "\001\002\000\024\003\056\017\046\020\053\034\151\055" +
    "\154\056\057\057\045\060\047\061\152\001\002\000\024" +
    "\003\056\017\046\020\053\034\151\055\154\056\057\057" +
    "\045\060\047\061\152\001\002\000\024\003\056\017\046" +
    "\020\053\034\151\055\154\056\057\057\045\060\047\061" +
    "\152\001\002\000\024\003\056\017\046\020\053\034\151" +
    "\055\154\056\057\057\045\060\047\061\152\001\002\000" +
    "\020\035\uff54\037\uff54\042\uff54\043\uff54\044\uff54\045\uff54" +
    "\046\uff54\001\002\000\020\035\uff59\037\uff59\042\uff59\043" +
    "\uff59\044\uff59\045\uff59\046\uff59\001\002\000\020\035\uff57" +
    "\037\uff57\042\uff57\043\uff57\044\uff57\045\uff57\046\uff57\001" +
    "\002\000\020\035\uff58\037\uff58\042\uff58\043\uff58\044\162" +
    "\045\161\046\156\001\002\000\020\035\uff55\037\uff55\042" +
    "\uff55\043\160\044\162\045\161\046\156\001\002\000\020" +
    "\035\uff56\037\uff56\042\uff56\043\uff56\044\uff56\045\uff56\046" +
    "\uff56\001\002\000\010\003\uff9d\036\uff9d\061\uff9d\001\002" +
    "\000\006\003\174\064\025\001\002\000\034\003\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\021\ufff5\061\ufff5\066\ufff5\067\ufff5\001\002\000" +
    "\004\035\ufff9\001\002\000\004\002\000\001\002\000\004" +
    "\035\177\001\002\000\004\002\ufff8\001\002\000\006\033" +
    "\uff6a\040\uff6a\001\002\000\064\003\uff6b\004\uff6b\005\uff6b" +
    "\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b\021" +
    "\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b" +
    "\030\uff6b\031\uff6b\037\uff6b\061\uff6b\062\uff6b\063\uff6b\065" +
    "\uff6b\066\uff6b\067\uff6b\001\002\000\004\035\203\001\002" +
    "\000\006\002\ufffb\036\ufffd\001\002\000\004\036\205\001" +
    "\002\000\056\003\217\004\020\005\013\006\012\007\010" +
    "\010\005\011\022\012\037\013\021\021\033\022\215\025" +
    "\227\026\241\027\213\030\240\031\212\037\225\061\015" +
    "\062\236\063\242\065\216\067\034\001\002\000\004\002" +
    "\ufffc\001\002\000\062\003\uffb2\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\037\uffb2\061\uffb2\062\uffb2\063\uffb2\065\uffb2\067" +
    "\uffb2\001\002\000\062\003\uff90\004\uff90\005\uff90\006\uff90" +
    "\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\021\uff90\022" +
    "\uff90\023\u0125\024\u0123\025\uff90\026\uff90\027\uff90\030\uff90" +
    "\031\uff90\037\uff90\061\uff90\062\uff90\063\uff90\065\uff90\067" +
    "\uff90\001\002\000\062\003\uffbb\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\037\uffbb\061\uffbb\062\uffbb\063\uffbb\065\uffbb\067" +
    "\uffbb\001\002\000\004\036\u0119\001\002\000\004\034\u010a" +
    "\001\002\000\056\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\021\uffc3\022\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\037\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\065\uffc3\067\uffc3\001\002\000\004" +
    "\034\u0104\001\002\000\024\003\056\017\046\020\053\034" +
    "\050\055\060\056\057\057\045\060\047\061\051\001\002" +
    "\000\006\037\uff93\040\uffb1\001\002\000\056\003\217\004" +
    "\020\005\013\006\012\007\010\010\005\011\022\012\037" +
    "\013\021\021\033\022\215\025\227\026\241\027\213\030" +
    "\240\031\212\037\377\061\015\062\236\063\242\065\216" +
    "\067\034\001\002\000\062\003\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\037\uffb9\061\uffb9\062\uffb9\063\uffb9\065\uffb9" +
    "\067\uffb9\001\002\000\062\003\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\037\uffba\061\uffba\062\uffba\063\uffba\065\uffba" +
    "\067\uffba\001\002\000\062\003\uffb5\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\037\uffb5\061\uffb5\062\uffb5\063\uffb5\065\uffb5" +
    "\067\uffb5\001\002\000\006\003\361\061\364\001\002\000" +
    "\064\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\011\ufff6\012\ufff6\013\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\037\ufff6\061\ufff6\062\ufff6\063\ufff6\065\ufff6\067\ufff6\001" +
    "\002\000\062\003\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\037\uffbd\061\uffbd\062\uffbd\063\uffbd\065\uffbd\067\uffbd\001" +
    "\002\000\004\034\351\001\002\000\062\003\uffb8\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\037\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\065\uffb8\067\uffb8\001\002\000\062\003\uffb4\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\037\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\065\uffb4\067\uffb4\001\002\000\062\003\uffbc\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\037\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\065\uffbc\067\uffbc\001\002\000\062\003\uffb6\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\037\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\065\uffb6\067\uffb6\001\002\000\062\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\037\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\065\uffb3\067\uffb3\001\002\000\062\003\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\037\uffbe\061\uffbe\062\uffbe\063" +
    "\uffbe\065\uffbe\067\uffbe\001\002\000\004\036\342\001\002" +
    "\000\062\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\037" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\065\uffb7\067\uffb7\001\002" +
    "\000\004\036\331\001\002\000\056\003\217\004\020\005" +
    "\013\006\012\007\010\010\005\011\022\012\037\013\021" +
    "\021\033\022\215\025\227\026\241\027\213\030\240\031" +
    "\212\036\205\061\015\062\236\063\242\065\216\067\034" +
    "\001\002\000\004\036\243\001\002\000\006\003\056\061" +
    "\245\001\002\000\004\037\250\001\002\000\010\003\100" +
    "\036\101\037\246\001\002\000\004\040\247\001\002\000" +
    "\062\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78" +
    "\011\uff78\012\uff78\013\uff78\021\uff78\022\uff78\023\uff78\024" +
    "\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78\037\uff78" +
    "\061\uff78\062\uff78\063\uff78\065\uff78\067\uff78\001\002\000" +
    "\004\040\251\001\002\000\062\003\uff77\004\uff77\005\uff77" +
    "\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\021" +
    "\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77" +
    "\030\uff77\031\uff77\037\uff77\061\uff77\062\uff77\063\uff77\065" +
    "\uff77\067\uff77\001\002\000\004\025\uff7e\001\002\000\004" +
    "\025\uff7f\001\002\000\004\025\255\001\002\000\004\034" +
    "\256\001\002\000\024\003\271\014\260\017\046\020\053" +
    "\034\270\056\057\057\045\060\047\061\261\001\002\000" +
    "\004\035\330\001\002\000\024\003\271\014\260\017\046" +
    "\020\053\034\270\056\057\057\045\060\047\061\261\001" +
    "\002\000\046\003\100\015\uff44\016\uff44\033\uff44\034\102" +
    "\035\uff44\036\101\042\uff30\043\uff30\044\uff30\045\uff30\046" +
    "\uff30\047\uff30\050\uff30\051\uff30\052\uff30\053\uff30\054\uff30" +
    "\001\002\000\040\015\uff32\016\uff32\033\uff32\035\uff32\042" +
    "\uff32\043\uff32\044\uff32\045\uff32\046\uff32\047\uff32\050\uff32" +
    "\051\uff32\052\uff32\053\uff32\054\uff32\001\002\000\012\015" +
    "\uff43\016\uff43\033\uff43\035\uff43\001\002\000\016\047\324" +
    "\050\323\051\321\052\325\053\320\054\322\001\002\000" +
    "\012\015\uff41\016\uff41\033\uff41\035\uff41\001\002\000\012" +
    "\015\uff45\016\uff45\033\uff45\035\uff45\001\002\000\040\015" +
    "\uff42\016\uff42\033\uff42\035\uff42\042\uff2f\043\uff2f\044\uff2f" +
    "\045\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f\053" +
    "\uff2f\054\uff2f\001\002\000\024\003\271\014\260\017\046" +
    "\020\053\034\270\056\057\057\045\060\047\061\261\001" +
    "\002\000\014\015\uff3f\016\uff3f\033\uff3f\035\uff3f\037\uff93" +
    "\001\002\000\012\015\311\016\312\033\uff4a\035\uff4a\001" +
    "\002\000\040\015\uff38\016\uff38\033\uff38\035\uff38\042\276" +
    "\043\300\044\301\045\277\046\275\047\uff38\050\uff38\051" +
    "\uff38\052\uff38\053\uff38\054\uff38\001\002\000\040\015\uff31" +
    "\016\uff31\033\uff31\035\uff31\042\uff31\043\uff31\044\uff31\045" +
    "\uff31\046\uff31\047\uff31\050\uff31\051\uff31\052\uff31\053\uff31" +
    "\054\uff31\001\002\000\014\003\056\056\057\057\045\060" +
    "\047\061\303\001\002\000\014\003\056\056\057\057\045" +
    "\060\047\061\303\001\002\000\014\003\056\056\057\057" +
    "\045\060\047\061\303\001\002\000\014\003\056\056\057" +
    "\057\045\060\047\061\303\001\002\000\014\003\056\056" +
    "\057\057\045\060\047\061\303\001\002\000\040\015\uff2f" +
    "\016\uff2f\033\uff2f\035\uff2f\042\uff2f\043\uff2f\044\uff2f\045" +
    "\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f\052\uff2f\053\uff2f" +
    "\054\uff2f\001\002\000\046\003\100\015\uff30\016\uff30\033" +
    "\uff30\034\102\035\uff30\036\101\042\uff30\043\uff30\044\uff30" +
    "\045\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052\uff30\053" +
    "\uff30\054\uff30\001\002\000\040\015\uff37\016\uff37\033\uff37" +
    "\035\uff37\042\uff37\043\uff37\044\uff37\045\uff37\046\uff37\047" +
    "\uff37\050\uff37\051\uff37\052\uff37\053\uff37\054\uff37\001\002" +
    "\000\040\015\uff36\016\uff36\033\uff36\035\uff36\042\uff36\043" +
    "\uff36\044\301\045\277\046\275\047\uff36\050\uff36\051\uff36" +
    "\052\uff36\053\uff36\054\uff36\001\002\000\040\015\uff35\016" +
    "\uff35\033\uff35\035\uff35\042\uff35\043\uff35\044\uff35\045\uff35" +
    "\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35\053\uff35\054" +
    "\uff35\001\002\000\040\015\uff33\016\uff33\033\uff33\035\uff33" +
    "\042\uff33\043\300\044\301\045\277\046\275\047\uff33\050" +
    "\uff33\051\uff33\052\uff33\053\uff33\054\uff33\001\002\000\040" +
    "\015\uff34\016\uff34\033\uff34\035\uff34\042\uff34\043\uff34\044" +
    "\uff34\045\uff34\046\uff34\047\uff34\050\uff34\051\uff34\052\uff34" +
    "\053\uff34\054\uff34\001\002\000\024\003\271\014\260\017" +
    "\046\020\053\034\270\056\057\057\045\060\047\061\261" +
    "\001\002\000\024\003\271\014\260\017\046\020\053\034" +
    "\270\056\057\057\045\060\047\061\261\001\002\000\012" +
    "\015\311\016\uff48\033\uff48\035\uff48\001\002\000\012\015" +
    "\uff49\016\uff49\033\uff49\035\uff49\001\002\000\010\015\311" +
    "\016\312\035\316\001\002\000\012\015\uff46\016\uff46\033" +
    "\uff46\035\uff46\001\002\000\014\003\056\056\057\057\045" +
    "\060\047\061\303\001\002\000\014\003\uff3a\056\uff3a\057" +
    "\uff3a\060\uff3a\061\uff3a\001\002\000\014\003\uff3d\056\uff3d" +
    "\057\uff3d\060\uff3d\061\uff3d\001\002\000\014\003\uff39\056" +
    "\uff39\057\uff39\060\uff39\061\uff39\001\002\000\014\003\uff3c" +
    "\056\uff3c\057\uff3c\060\uff3c\061\uff3c\001\002\000\014\003" +
    "\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\001\002\000\014" +
    "\003\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\001\002\000" +
    "\012\015\uff40\016\uff40\033\uff40\035\uff40\001\002\000\012" +
    "\015\uff47\016\uff47\033\uff47\035\uff47\001\002\000\062\003" +
    "\uff80\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80\011\uff80" +
    "\012\uff80\013\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025" +
    "\uff80\026\uff80\027\uff80\030\uff80\031\uff80\037\uff80\061\uff80" +
    "\062\uff80\063\uff80\065\uff80\067\uff80\001\002\000\024\003" +
    "\056\017\046\020\053\034\050\055\060\056\057\057\045" +
    "\060\047\061\051\001\002\000\004\040\333\001\002\000" +
    "\062\003\uff76\004\uff76\005\uff76\006\uff76\007\uff76\010\uff76" +
    "\011\uff76\012\uff76\013\uff76\021\uff76\022\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\031\uff76\037\uff76" +
    "\061\uff76\062\uff76\063\uff76\065\uff76\067\uff76\001\002\000" +
    "\006\032\337\037\340\001\002\000\006\032\uff6e\037\uff6e" +
    "\001\002\000\006\032\uff71\037\uff71\001\002\000\024\003" +
    "\056\017\046\020\053\034\050\055\060\056\057\057\045" +
    "\060\047\061\051\001\002\000\004\040\uff74\001\002\000" +
    "\006\032\uff72\037\uff72\001\002\000\006\003\056\061\344" +
    "\001\002\000\004\037\347\001\002\000\010\003\100\036" +
    "\101\037\345\001\002\000\004\040\346\001\002\000\062" +
    "\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011" +
    "\uff7a\012\uff7a\013\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a" +
    "\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\037\uff7a\061" +
    "\uff7a\062\uff7a\063\uff7a\065\uff7a\067\uff7a\001\002\000\004" +
    "\040\350\001\002\000\062\003\uff79\004\uff79\005\uff79\006" +
    "\uff79\007\uff79\010\uff79\011\uff79\012\uff79\013\uff79\021\uff79" +
    "\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030" +
    "\uff79\031\uff79\037\uff79\061\uff79\062\uff79\063\uff79\065\uff79" +
    "\067\uff79\001\002\000\024\003\271\014\260\017\046\020" +
    "\053\034\270\056\057\057\045\060\047\061\261\001\002" +
    "\000\004\035\353\001\002\000\056\003\217\004\020\005" +
    "\013\006\012\007\010\010\005\011\022\012\037\013\021" +
    "\021\033\022\215\025\227\026\241\027\213\030\240\031" +
    "\212\036\205\061\015\062\236\063\242\065\216\067\034" +
    "\001\002\000\062\003\uff81\004\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\011\uff81\012\uff81\013\uff81\021\uff81\022\uff81" +
    "\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81\031" +
    "\uff81\037\uff81\061\uff81\062\uff81\063\uff81\065\uff81\067\uff81" +
    "\001\002\000\062\003\uff82\004\uff82\005\uff82\006\uff82\007" +
    "\uff82\010\uff82\011\uff82\012\uff82\013\uff82\021\uff82\022\uff82" +
    "\023\uff82\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031" +
    "\uff82\037\uff82\061\uff82\062\uff82\063\uff82\065\uff82\067\uff82" +
    "\001\002\000\062\003\uff83\004\uff83\005\uff83\006\uff83\007" +
    "\uff83\010\uff83\011\uff83\012\uff83\013\uff83\021\uff83\022\uff83" +
    "\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031" +
    "\uff83\037\uff83\061\uff83\062\uff83\063\uff83\065\uff83\067\uff83" +
    "\001\002\000\006\032\uffad\040\uffad\001\002\000\006\032" +
    "\373\040\374\001\002\000\026\003\uffa9\017\uffa9\020\uffa9" +
    "\034\uffa9\041\uffa6\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\001\002\000\024\003\056\017\046\020\053\034\050" +
    "\055\060\056\057\057\045\060\047\061\051\001\002\000" +
    "\006\032\uffac\040\uffac\001\002\000\010\032\uffab\040\uffab" +
    "\041\365\001\002\000\024\003\uffa7\017\uffa7\020\uffa7\034" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\001\002" +
    "\000\006\032\uffaa\040\uffaa\001\002\000\004\041\372\001" +
    "\002\000\024\003\056\017\046\020\053\034\050\055\060" +
    "\056\057\057\045\060\047\061\051\001\002\000\006\032" +
    "\uffa8\040\uffa8\001\002\000\024\003\uffa5\017\uffa5\020\uffa5" +
    "\034\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\001" +
    "\002\000\006\003\361\061\364\001\002\000\064\003\uffaf" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\037\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\065\uffaf\066\uffaf\067\uffaf\001\002\000\006" +
    "\032\uffae\040\uffae\001\002\000\056\003\uffc4\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\021\uffc4\022\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\037\uffc4\061\uffc4\062\uffc4\063\uffc4\065\uffc4\067\uffc4" +
    "\001\002\000\064\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\037\ufff7\061\ufff7\062\ufff7\063\ufff7\065\ufff7" +
    "\067\ufff7\001\002\000\004\040\u0101\001\002\000\062\003" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\037\uffb0\061\uffb0" +
    "\062\uffb0\063\uffb0\065\uffb0\067\uffb0\001\002\000\004\040" +
    "\u0103\001\002\000\062\003\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\037\uffd8\061\uffd8\062\uffd8\063\uffd8\065\uffd8\067" +
    "\uffd8\001\002\000\024\003\271\014\260\017\046\020\053" +
    "\034\270\056\057\057\045\060\047\061\261\001\002\000" +
    "\004\035\u0106\001\002\000\056\003\217\004\020\005\013" +
    "\006\012\007\010\010\005\011\022\012\037\013\021\021" +
    "\033\022\215\025\227\026\241\027\213\030\240\031\212" +
    "\036\205\061\015\062\236\063\242\065\216\067\034\001" +
    "\002\000\062\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\013\uff8f\021\uff8f\022\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f" +
    "\037\uff8f\061\uff8f\062\uff8f\063\uff8f\065\uff8f\067\uff8f\001" +
    "\002\000\062\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\037\uff8d\061\uff8d\062\uff8d\063\uff8d\065\uff8d\067\uff8d\001" +
    "\002\000\062\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\011\uff8e\012\uff8e\013\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e" +
    "\037\uff8e\061\uff8e\062\uff8e\063\uff8e\065\uff8e\067\uff8e\001" +
    "\002\000\004\061\u010c\001\002\000\004\033\u010e\001\002" +
    "\000\004\041\u010d\001\002\000\024\003\uff69\017\uff69\020" +
    "\uff69\034\uff69\055\uff69\056\uff69\057\uff69\060\uff69\061\uff69" +
    "\001\002\000\024\003\271\014\260\017\046\020\053\034" +
    "\270\056\057\057\045\060\047\061\261\001\002\000\004" +
    "\033\u0110\001\002\000\006\042\u0111\043\u0113\001\002\000" +
    "\004\056\uff6d\001\002\000\004\056\u0114\001\002\000\004" +
    "\056\uff6c\001\002\000\004\035\u0115\001\002\000\056\003" +
    "\217\004\020\005\013\006\012\007\010\010\005\011\022" +
    "\012\037\013\021\021\033\022\215\025\227\026\241\027" +
    "\213\030\240\031\212\036\205\061\015\062\236\063\242" +
    "\065\216\067\034\001\002\000\062\003\uff7d\004\uff7d\005" +
    "\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d" +
    "\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027" +
    "\uff7d\030\uff7d\031\uff7d\037\uff7d\061\uff7d\062\uff7d\063\uff7d" +
    "\065\uff7d\067\uff7d\001\002\000\062\003\uff7b\004\uff7b\005" +
    "\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b" +
    "\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027" +
    "\uff7b\030\uff7b\031\uff7b\037\uff7b\061\uff7b\062\uff7b\063\uff7b" +
    "\065\uff7b\067\uff7b\001\002\000\062\003\uff7c\004\uff7c\005" +
    "\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027" +
    "\uff7c\030\uff7c\031\uff7c\037\uff7c\061\uff7c\062\uff7c\063\uff7c" +
    "\065\uff7c\067\uff7c\001\002\000\024\003\056\017\046\020" +
    "\053\034\050\055\060\056\057\057\045\060\047\061\051" +
    "\001\002\000\004\040\u011b\001\002\000\062\003\uff75\004" +
    "\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75" +
    "\013\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026" +
    "\uff75\027\uff75\030\uff75\031\uff75\037\uff75\061\uff75\062\uff75" +
    "\063\uff75\065\uff75\067\uff75\001\002\000\006\032\uff6f\037" +
    "\uff6f\001\002\000\006\032\u011e\037\u011f\001\002\000\024" +
    "\003\056\017\046\020\053\034\050\055\060\056\057\057" +
    "\045\060\047\061\051\001\002\000\004\040\uff73\001\002" +
    "\000\006\032\uff70\037\uff70\001\002\000\062\003\uff8a\004" +
    "\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a" +
    "\013\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\037\uff8a\061\uff8a\062\uff8a" +
    "\063\uff8a\065\uff8a\067\uff8a\001\002\000\062\003\uff88\004" +
    "\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88" +
    "\013\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\030\uff88\031\uff88\037\uff88\061\uff88\062\uff88" +
    "\063\uff88\065\uff88\067\uff88\001\002\000\056\003\217\004" +
    "\020\005\013\006\012\007\010\010\005\011\022\012\037" +
    "\013\021\021\033\022\215\025\227\026\241\027\213\030" +
    "\240\031\212\036\205\061\015\062\236\063\242\065\216" +
    "\067\034\001\002\000\062\003\uff91\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\021\uff91" +
    "\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\037\uff91\061\uff91\062\uff91\063\uff91\065\uff91" +
    "\067\uff91\001\002\000\004\034\u0129\001\002\000\062\003" +
    "\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\013\uff8b\021\uff8b\022\uff8b\023\u0125\024\u0123\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\037\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\065\uff8b\067\uff8b\001\002\000\062\003" +
    "\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c" +
    "\012\uff8c\013\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\037\uff8c\061\uff8c" +
    "\062\uff8c\063\uff8c\065\uff8c\067\uff8c\001\002\000\062\003" +
    "\uff89\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89" +
    "\012\uff89\013\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\037\uff89\061\uff89" +
    "\062\uff89\063\uff89\065\uff89\067\uff89\001\002\000\024\003" +
    "\271\014\260\017\046\020\053\034\270\056\057\057\045" +
    "\060\047\061\261\001\002\000\004\035\u012b\001\002\000" +
    "\056\003\217\004\020\005\013\006\012\007\010\010\005" +
    "\011\022\012\037\013\021\021\033\022\215\025\227\026" +
    "\241\027\213\030\240\031\212\036\205\061\015\062\236" +
    "\063\242\065\216\067\034\001\002\000\062\003\uff85\004" +
    "\uff85\005\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012\uff85" +
    "\013\uff85\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026" +
    "\uff85\027\uff85\030\uff85\031\uff85\037\uff85\061\uff85\062\uff85" +
    "\063\uff85\065\uff85\067\uff85\001\002\000\062\003\uff86\004" +
    "\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012\uff86" +
    "\013\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\037\uff86\061\uff86\062\uff86" +
    "\063\uff86\065\uff86\067\uff86\001\002\000\062\003\uff87\004" +
    "\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87" +
    "\013\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026" +
    "\uff87\027\uff87\030\uff87\031\uff87\037\uff87\061\uff87\062\uff87" +
    "\063\uff87\065\uff87\067\uff87\001\002\000\062\003\uff84\004" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84" +
    "\013\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026" +
    "\uff84\027\uff84\030\uff84\031\uff84\037\uff84\061\uff84\062\uff84" +
    "\063\uff84\065\uff84\067\uff84\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002\000\014\003\ufff1\032\uffab" +
    "\034\ufff1\040\uffab\041\365\001\002\000\006\003\u0134\034" +
    "\u0136\001\002\000\004\035\uffd5\001\002\000\006\003\u0142" +
    "\036\u0143\001\002\000\030\003\u0139\004\020\005\013\006" +
    "\012\007\010\010\005\011\022\012\037\013\021\035\u0138" +
    "\067\034\001\002\000\006\032\uffd2\035\uffd2\001\002\000" +
    "\006\003\uffd7\036\uffd7\001\002\000\004\061\uffd0\001\002" +
    "\000\006\032\u013d\035\u013e\001\002\000\004\061\u013c\001" +
    "\002\000\006\032\uffd1\035\uffd1\001\002\000\026\003\u0139" +
    "\004\020\005\013\006\012\007\010\010\005\011\022\012" +
    "\037\013\021\067\034\001\002\000\006\003\uffd6\036\uffd6" +
    "\001\002\000\006\032\uffd3\035\uffd3\001\002\000\004\061" +
    "\u0141\001\002\000\006\032\uffcf\035\uffcf\001\002\000\004" +
    "\037\uffca\001\002\000\056\003\u0147\004\020\005\013\006" +
    "\012\007\010\010\005\011\022\012\037\013\021\021\033" +
    "\022\215\025\227\026\241\027\213\030\240\031\212\037" +
    "\u014b\061\015\062\236\063\242\065\216\067\034\001\002" +
    "\000\034\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\021\ufff0\061\ufff0\066\ufff0" +
    "\067\ufff0\001\002\000\032\003\uffe2\022\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\037\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\065\uffe2\001\002\000\032\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\021\uffc5" +
    "\037\uffc5\066\uffc5\067\uffc5\001\002\000\006\037\uff93\040" +
    "\uffe1\001\002\000\032\003\uffe9\022\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\037\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\065\uffe9\001\002\000\032\003\uffea\022\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\037\uffea\061\uffea\062" +
    "\uffea\063\uffea\065\uffea\001\002\000\032\003\uffe5\022\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\037\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\065\uffe5\001\002\000\034\003\uffcb" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\021\uffcb\061\uffcb\066\uffcb\067\uffcb\001\002" +
    "\000\032\003\uffec\022\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\037\uffec\061\uffec\062\uffec\063\uffec\065\uffec" +
    "\001\002\000\032\003\uffe8\022\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\037\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\065\uffe8\001\002\000\032\003\uffed\022\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\037\uffed\061\uffed\062\uffed" +
    "\063\uffed\065\uffed\001\002\000\032\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\021\uffc7" +
    "\037\uffc7\066\uffc7\067\uffc7\001\002\000\032\003\uffee\022" +
    "\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\037\uffee" +
    "\061\uffee\062\uffee\063\uffee\065\uffee\001\002\000\032\003" +
    "\uffe4\022\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\037\uffe4\061\uffe4\062\uffe4\063\uffe4\065\uffe4\001\002\000" +
    "\032\003\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\037\uffeb\061\uffeb\062\uffeb\063\uffeb\065\uffeb\001" +
    "\002\000\032\003\uffe6\022\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\037\uffe6\061\uffe6\062\uffe6\063\uffe6\065" +
    "\uffe6\001\002\000\032\003\uffe3\022\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\037\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\065\uffe3\001\002\000\032\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\021\uffc6\037" +
    "\uffc6\066\uffc6\067\uffc6\001\002\000\032\003\u0147\022\215" +
    "\025\227\026\241\027\213\030\240\031\212\037\u015f\061" +
    "\015\062\236\063\242\065\216\001\002\000\032\003\uffe7" +
    "\022\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\037" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\065\uffe7\001\002\000\032" +
    "\004\020\005\013\006\012\007\010\010\005\011\022\012" +
    "\037\013\021\021\033\037\u015b\066\u0159\067\034\001\002" +
    "\000\030\003\u0147\022\215\025\227\026\241\027\213\030" +
    "\240\031\212\061\015\062\236\063\242\065\216\001\002" +
    "\000\032\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\021\uffc8\037\uffc8\066\uffc8\067\uffc8" +
    "\001\002\000\034\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\021\uffcd\061\uffcd" +
    "\066\uffcd\067\uffcd\001\002\000\032\003\u0147\022\215\025" +
    "\227\026\241\027\213\030\240\031\212\037\u015d\061\015" +
    "\062\236\063\242\065\216\001\002\000\034\003\uffce\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\021\uffce\061\uffce\066\uffce\067\uffce\001\002\000" +
    "\032\003\uffef\022\uffef\025\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\037\uffef\061\uffef\062\uffef\063\uffef\065\uffef\001" +
    "\002\000\034\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\021\uffcc\061\uffcc\066" +
    "\uffcc\067\uffcc\001\002\000\004\040\u0161\001\002\000\032" +
    "\003\uffe0\022\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\037\uffe0\061\uffe0\062\uffe0\063\uffe0\065\uffe0\001\002" +
    "\000\004\037\u0163\001\002\000\034\003\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\021\uffc9\061\uffc9\066\uffc9\067\uffc9\001\002\000\004\035" +
    "\u0165\001\002\000\006\003\uffd4\036\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\036\003\010\011\022\012\016\013\030\014" +
    "\031\016\005\017\027\020\025\023\003\030\034\031\035" +
    "\032\013\067\006\107\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\362\022\361" +
    "\024\356\025\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\076\035\075\001\001\000\004\011\u0130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\120\175\135\060" +
    "\001\001\000\020\031\042\070\051\071\041\072\177\073" +
    "\053\075\054\114\040\001\001\000\030\003\010\014\172" +
    "\016\005\017\027\020\025\023\003\030\034\031\035\032" +
    "\013\067\006\107\023\001\001\000\002\001\001\000\004" +
    "\067\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\042\070\051" +
    "\071\041\072\043\073\053\075\054\114\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\031\042\070\051\071\041\075\120\114\040" +
    "\001\001\000\010\034\076\035\075\116\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\135\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\031\042\070\051\071\041\075\073\114\040\001\001\000" +
    "\014\031\042\070\051\071\041\075\072\114\040\001\001" +
    "\000\014\031\042\070\051\071\041\075\071\114\040\001" +
    "\001\000\014\031\042\070\051\071\041\075\070\114\040" +
    "\001\001\000\014\031\042\070\051\071\041\075\067\114" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\117\001\001\000\002\001\001\000\004" +
    "\132\115\001\001\000\016\031\042\070\051\071\041\073" +
    "\113\075\054\114\040\001\001\000\020\031\042\070\051" +
    "\071\041\073\104\075\054\114\040\115\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\123\106\135\060\001\001\000\016\031\042\070\051\071" +
    "\041\073\107\075\054\114\040\001\001\000\002\001\001" +
    "\000\016\031\042\070\051\071\041\073\112\075\054\114" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\126\037\127\001\001\000" +
    "\004\133\135\001\001\000\016\031\146\070\152\071\145" +
    "\074\147\076\144\114\143\001\001\000\006\033\130\037" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\133\135\134\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\146\070\152\071\145\076\154\114\143\001\001\000\010" +
    "\034\076\035\075\116\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\146\070\152" +
    "\071\145\076\167\114\143\001\001\000\014\031\146\070" +
    "\152\071\145\076\166\114\143\001\001\000\014\031\146" +
    "\070\152\071\145\076\165\114\143\001\001\000\014\031" +
    "\146\070\152\071\145\076\164\114\143\001\001\000\014" +
    "\031\146\070\152\071\145\076\163\114\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\174\001\001\000\002\001\001\000\004" +
    "\120\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\117\203\001\001\000\004\005\205\001" +
    "\001\000\052\002\213\003\234\004\217\017\027\020\025" +
    "\023\225\030\231\031\035\032\210\040\221\041\207\050" +
    "\220\053\227\055\236\057\232\060\222\067\223\105\230" +
    "\106\233\113\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\043\u0123\044\u0125\045\u0121\047\u0120\001\001" +
    "\000\002\001\001\000\004\062\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\031\042" +
    "\070\051\071\041\073\u0101\075\054\114\040\001\001\000" +
    "\006\127\377\135\060\001\001\000\050\002\375\003\234" +
    "\017\027\020\025\023\225\030\231\031\035\032\210\040" +
    "\221\041\207\050\220\053\227\055\236\057\232\060\222" +
    "\067\223\105\230\106\233\113\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\362" +
    "\022\361\024\356\025\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\331\001\001\000\054\002\252\003\234\005" +
    "\251\017\027\020\025\023\225\030\231\031\035\032\210" +
    "\040\221\041\207\050\220\053\227\055\236\056\253\057" +
    "\232\060\222\067\223\105\230\106\233\113\206\001\001" +
    "\000\002\001\001\000\004\031\243\001\001\000\002\001" +
    "\001\000\006\034\076\035\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\031\273\070\261\071\262\077\256\100" +
    "\271\101\265\102\264\103\263\104\272\114\266\001\001" +
    "\000\002\001\001\000\024\031\273\070\261\071\262\100" +
    "\326\101\265\102\264\103\263\104\272\114\266\001\001" +
    "\000\010\034\076\035\075\116\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\031" +
    "\273\070\261\071\262\100\314\101\265\102\264\103\263" +
    "\104\272\114\266\001\001\000\004\135\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\031\273\070\261\104\307\114\301\001\001\000\012\031" +
    "\273\070\261\104\306\114\301\001\001\000\012\031\273" +
    "\070\261\104\305\114\301\001\001\000\012\031\273\070" +
    "\261\104\304\114\301\001\001\000\012\031\273\070\261" +
    "\104\303\114\301\001\001\000\002\001\001\000\010\034" +
    "\076\035\075\116\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\031\273\070\261\071\262\100\313\101\265" +
    "\102\264\103\263\104\272\114\266\001\001\000\024\031" +
    "\273\070\261\071\262\100\312\101\265\102\264\103\263" +
    "\104\272\114\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\031\273" +
    "\070\261\103\325\104\272\114\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\031\042\063\335" +
    "\064\333\070\051\071\041\073\334\075\054\114\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\031\042\063" +
    "\340\070\051\071\041\073\334\075\054\114\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\342\001" +
    "\001\000\002\001\001\000\006\034\076\035\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\031\273\070\261\071\262\077\351" +
    "\100\271\101\265\102\264\103\263\104\272\114\266\001" +
    "\001\000\002\001\001\000\054\002\354\003\234\005\353" +
    "\017\027\020\025\023\225\030\231\031\035\032\210\040" +
    "\221\041\207\050\220\051\355\053\227\055\236\057\232" +
    "\060\222\067\223\105\230\106\233\113\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\130\367\131\366\001" +
    "\001\000\020\031\042\070\051\071\041\072\365\073\053" +
    "\075\054\114\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\031\042\070\051\071\041\072\370\073\053\075" +
    "\054\114\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\362\022\361\024\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\031\273\070\261\071\262\077\u0104" +
    "\100\271\101\265\102\264\103\263\104\272\114\266\001" +
    "\001\000\002\001\001\000\054\002\u0108\003\234\005\u0107" +
    "\017\027\020\025\023\225\030\231\031\035\032\210\040" +
    "\221\041\207\042\u0106\050\220\053\227\055\236\057\232" +
    "\060\222\067\223\105\230\106\233\113\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\027\020\u010a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\031\273\070\261\071\262" +
    "\077\u010e\100\271\101\265\102\264\103\263\104\272\114" +
    "\266\001\001\000\002\001\001\000\004\052\u0111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\002\u0117\003\234\005\u0116\017\027" +
    "\020\025\023\225\030\231\031\035\032\210\040\221\041" +
    "\207\050\220\053\227\054\u0115\055\236\057\232\060\222" +
    "\067\223\105\230\106\233\113\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\031\042" +
    "\063\u011b\065\u011c\070\051\071\041\073\334\075\054\114" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\031\042\063\u011f\070" +
    "\051\071\041\073\334\075\054\114\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\002\u012c\003\234\005\u012b\017\027\020\025" +
    "\023\225\030\231\031\035\032\210\040\221\041\207\046" +
    "\u012e\050\220\053\227\055\236\057\232\060\222\067\223" +
    "\105\230\106\233\113\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\045\u0127\047\u0126\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\031\273\070\261\071" +
    "\262\077\u0129\100\271\101\265\102\264\103\263\104\272" +
    "\114\266\001\001\000\002\001\001\000\054\002\u012c\003" +
    "\234\005\u012b\017\027\020\025\023\225\030\231\031\035" +
    "\032\210\040\221\041\207\046\u012d\050\220\053\227\055" +
    "\236\057\232\060\222\067\223\105\230\106\233\113\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u0132\001\001\000\004\111\u0134\001\001\000" +
    "\004\124\u0163\001\001\000\004\015\u0143\001\001\000\010" +
    "\067\u013a\110\u0139\112\u0136\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\067\u013a\112" +
    "\u013e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\126\u0161\001\001\000" +
    "\060\003\u0154\006\u0155\007\u014f\010\u014d\017\027\020\025" +
    "\023\u014b\026\u0157\027\u014e\030\u0151\031\035\032\u0145\040" +
    "\u0148\041\207\050\u0147\053\u014c\055\u0156\057\u0152\060\u0149" +
    "\067\223\105\u0150\106\u0153\113\u0144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\122\u015f" +
    "\135\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\007\u015d\010" +
    "\u014d\017\027\020\025\023\u014b\030\u0151\031\035\040\u0148" +
    "\041\207\050\u0147\053\u014c\055\u0156\057\u0152\060\u0149\105" +
    "\u0150\106\u0153\113\u0144\001\001\000\002\001\001\000\012" +
    "\003\u0154\027\u0159\032\u0145\067\223\001\001\000\046\006" +
    "\u015b\007\u014f\010\u014d\017\027\020\025\023\u014b\030\u0151" +
    "\031\035\040\u0148\041\207\050\u0147\053\u014c\055\u0156\057" +
    "\u0152\060\u0149\105\u0150\106\u0153\113\u0144\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\007\u015d\010\u014d\017" +
    "\027\020\025\023\u014b\030\u0151\031\035\040\u0148\041\207" +
    "\050\u0147\053\u014c\055\u0156\057\u0152\060\u0149\105\u0150\106" +
    "\u0153\113\u0144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private ManejadorParser mp = null;

	// Connect this parser to a scanner!
	public parser2(Lexer1 lex, ManejadorParser mp) {
		super(lex); 
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
        	System.out.println("Error");
            mp.printSintaxError(s);
        }

        public void report_error(String message, Object info){
        	System.out.println(message);
        	//System.out.println("Error");
        }

        public void report_fatal_error (String message, Object info){
        	System.out.println("Fatal Error");
        	mp.printSintaxError("No se ha encontrado ninguna estructura valida");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= globalInstruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto start_val = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // globalInstruction ::= bodyInstruction SEPARATOR mainInstruction 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("globalInstruction",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globalInstruction ::= SEPARATOR mainInstruction 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("globalInstruction",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globalInstruction ::= mainInstruction 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("globalInstruction",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
mp.setMainDecl(e1);mp.setGlobal(false);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$0",77, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainInstruction ::= MAIN OPEN_BRK CLOSE_BRK NT$0 block 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		mp.setGlobal(true);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("mainInstruction",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainInstruction ::= MAIN OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("mainInstruction",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainInstruction ::= MAIN 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("mainInstruction",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Estructura de MAIN no valida o faltante");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$1",78, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // mainInstruction ::= error NT$1 CLOSE_BRK 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("mainInstruction",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // block ::= OPEN_SQR instructions CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block ::= OPEN_SQR CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bodyInstruction ::= bodyInstruction bodyInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodyInstruction",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bodyInstruction ::= bodyInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodyInstruction",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bodyInstructionA ::= subprogram 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodyInstructionA",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bodyInstructionA ::= instructionB 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodyInstructionA",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.setSubprogramDecl(e1, e2, e2left, e2right); mp.setGlobal(false);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$2",79, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // subprogram ::= tipo VARIABLE NT$2 parametrosA bodySubprogram 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e4 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		mp.setGlobal(true);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("subprogram",69, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programInstruction ::= programInstruction programInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstruction",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programInstruction ::= programInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstruction",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programInstructionA ::= programInstructionB 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionA",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programInstructionB ::= formalAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // programInstructionB ::= arrayAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // programInstructionB ::= if 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // programInstructionB ::= while 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // programInstructionB ::= for 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // programInstructionB ::= doWhile 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // programInstructionB ::= print 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // programInstructionB ::= println 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // programInstructionB ::= scans 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // programInstructionB ::= scann 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // programInstructionB ::= rtrn 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$3 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Instruccion no conocida en cuerpo de programa: ");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$3",80, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // programInstructionB ::= error NT$3 SEMICOLON 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // subprogramCall ::= VARIABLE paramsA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		/*RESULT = mp.getSubprogramCall(e1, e2, e1left, e1right);*/
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("subprogramCall",74, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramsA ::= OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		RESULT = null;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsA",76, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramsA ::= OPEN_BRK paramsProgram CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsA",76, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramsProgram ::= paramsProgram COMMA opNum 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getComponentes(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsProgram",75, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramsProgram ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getComponente(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsProgram",75, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$4 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Parametros no validos para llamada de subprograma");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$4",81, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramsProgram ::= error NT$4 opNum 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsProgram",75, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rtrn ::= RETURN opNum SEMICOLON 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rtrn",73, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametrosA ::= OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametrosA",71, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametrosA ::= OPEN_BRK parametros CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametrosA",71, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$5 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Parametros no validos para declaracion de subprograma");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$5",82, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametrosA ::= error NT$5 CLOSE_BRK 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametrosA",71, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros ::= parametros COMMA parametro 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametros",70, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros ::= parametro 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametros",70, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro ::= tipo VARIABLE 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		mp.setParametroDecl(e1, e2, e2left, e2right);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametro",72, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$6 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error parametro");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$6",83, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= error NT$6 VARIABLE 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametro",72, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bodySubprogram ::= OPEN_SQR declns SEPARATOR programInstruction CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bodySubprogram ::= OPEN_SQR declns CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bodySubprogram ::= OPEN_SQR programInstruction CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bodySubprogram ::= OPEN_SQR CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$7 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error bodySubprogram");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$7",84, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bodySubprogram ::= error NT$7 CLOSE_SQR 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declns ::= declns declns1 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("declns",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declns ::= declns1 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("declns",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declns1 ::= decl 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("declns1",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declns1 ::= array 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("declns1",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instructions ::= instructions instruction 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructions",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instructions ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructions",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instructionB ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instructionB ::= formalAssign 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instructionB ::= arrayAssign 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instructionB ::= array 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruction ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruction ::= formalAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instruction ::= arrayAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instruction ::= array 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instruction ::= if 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruction ::= while 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instruction ::= for 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruction ::= doWhile 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruction ::= print 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruction ::= println 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instruction ::= scans 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instruction ::= scann 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // instruction ::= rtrn 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$8 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Instruccion no conocida");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$8",85, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instruction ::= error NT$8 SEMICOLON 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // decl ::= tipo decls SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		mp.setVariableDecl(e2,e1);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // decls ::= decls COMMA decl1 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getDecls(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decls",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // decls ::= decl1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decls",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // decl1 ::= assign2 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decl1",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // decl1 ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimpleAsign(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decl1",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assign2 ::= assign3 exp 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign2",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$9 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error de asignacion");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$9",86, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assign2 ::= error NT$9 exp 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign2",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assign3 ::= VARIABLE ASSIGN 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimpleAsign(e1, e1left, e1right);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign3",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$10 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error de asignacion variable");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$10",87, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assign3 ::= error NT$10 ASSIGN 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign3",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arrayDim ::= arrayDim arrayDim1 
            {
              LinkedList<Cuarteto> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		LinkedList<Cuarteto> e1 = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		LinkedList<Cuarteto> e2 = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDim",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arrayDim ::= arrayDim1 
            {
              LinkedList<Cuarteto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		LinkedList<Cuarteto> e = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDim",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arrayDim1 ::= OPEN_SQR opNum CLOSE_SQR 
            {
              LinkedList<Cuarteto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDim1",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$11 ::= 
            {
              LinkedList<Cuarteto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error de array dimension");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$11",88, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // arrayDim1 ::= error NT$11 CLOSE_SQR 
            {
              LinkedList<Cuarteto> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (LinkedList<Cuarteto>) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDim1",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // arrayDimen ::= arrayDimen arrayDimen1 
            {
              LinkedList<Cuarteto> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		LinkedList<Cuarteto> e1 = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		LinkedList<Cuarteto> e2 = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getDimensions(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDimen",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // arrayDimen ::= arrayDimen1 
            {
              LinkedList<Cuarteto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		LinkedList<Cuarteto> e = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDimen",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // arrayDimen1 ::= OPEN_SQR opNum2 CLOSE_SQR 
            {
              LinkedList<Cuarteto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = mp.getDimension(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDimen1",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$12 ::= 
            {
              LinkedList<Cuarteto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error de array dimension");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$12",89, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // arrayDimen1 ::= error NT$12 CLOSE_SQR 
            {
              LinkedList<Cuarteto> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (LinkedList<Cuarteto>) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDimen1",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // array ::= ARRAY tipo arrayDimen assignA SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		LinkedList<Cuarteto> e2 = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = mp.setArrayDecl(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("array",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // assignA ::= assignA COMMA VARIABLE 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getArrayAsign(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assignA",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // assignA ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimpleArrayAsign(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assignA",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$13 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error de asignacion 01");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$13",90, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // assignA ::= error NT$13 VARIABLE 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assignA",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // arrayAssign ::= arrayPosition ASSIGN exp SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayAssign",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // arrayPosition ::= VARIABLE arrayDim 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayPosition",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$14 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error array posicion");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$14",91, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arrayPosition ::= error NT$14 CLOSE_SQR 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayPosition",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if ::= if1 ifA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if ::= if1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // if1 ::= IF OPEN_BRK opBol CLOSE_BRK if2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("if1",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if2 ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("if2",32, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if2 ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("if2",32, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ifA ::= elseifA elseA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifA",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ifA ::= elseifA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifA",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ifA ::= elseA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifA",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // elseifA ::= elseifA elseifAA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifA",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // elseifA ::= elseifAA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifA",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // elseifAA ::= ELSIF OPEN_BRK opBol CLOSE_BRK elseifAA1 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifAA",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // elseifAA1 ::= instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifAA1",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // elseifAA1 ::= block 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifAA1",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // elseA ::= ELSE elseifAA1 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseA",37, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // while ::= WHILE OPEN_BRK opBol CLOSE_BRK whileA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // whileA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("whileA",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // whileA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("whileA",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // doWhile ::= DO doWhileA WHILE OPEN_BRK opBol CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("doWhile",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // doWhileA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("doWhileA",44, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // doWhileA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("doWhileA",44, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // for ::= FOR OPEN_BRK assign COLON opBol COLON signo NUM_INTEGER CLOSE_BRK forA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e5 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("for",41, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // forA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("forA",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // forA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("forA",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // scans ::= SCANS OPEN_SQR VARIABLE CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("scans",67, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // scans ::= SCANS OPEN_SQR arrayPosition CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("scans",67, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // scann ::= SCANN OPEN_SQR VARIABLE CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("scann",68, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // scann ::= SCANN OPEN_SQR arrayPosition CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("scann",68, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // print ::= PRINT printA SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("print",45, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // println ::= PRINTLN printB SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("println",46, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // printA ::= OPEN_SQR valueA CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("printA",47, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // printB ::= OPEN_SQR valueB CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("printB",48, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // valueA ::= valueA COMMA value 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("valueA",50, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // valueA ::= value 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("valueA",50, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // valueB ::= valueB COMMA value 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("valueB",51, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // valueB ::= value 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("valueB",51, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // value ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("value",49, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // signo ::= PLUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("signo",40, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // signo ::= MINUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("signo",40, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // formalAssign ::= assign SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("formalAssign",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // assign ::= assign1 exp 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // assign1 ::= VARIABLE ASSIGN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign1",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // exp ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("exp",56, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // opNum ::= ex 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opNum",57, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ex ::= ex MULTI ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ex ::= ex MINUS ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ex ::= ex DIVISION ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ex ::= ex MODULE ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ex ::= ex PLUS ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ex ::= OPEN_BRK ex CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ex ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // ex ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ex ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ex ::= TEXT 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ex ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ex ::= subprogramCall 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // opNum2 ::= ex2 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.orderOpNum(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opNum2",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ex2 ::= ex2 MULTI ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getMulti(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ex2 ::= ex2 MINUS ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getResta(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ex2 ::= ex2 DIVISION ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getDivision(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ex2 ::= ex2 MODULE ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getModulo(e1,e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ex2 ::= ex2 PLUS ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSumaConcatenacion(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ex2 ::= OPEN_BRK ex2 CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ex2 ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getCuartetoNum(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ex2 ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ex2 ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getVariable(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ex2 ::= TEXT 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getCuartetoString(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ex2 ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getCuartetoBool(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ex2 ::= subprogramCall 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ex2",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // num ::= NUM_INTEGER 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolEntero(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("num",54, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // num ::= NUM_FLOAT 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolFloat(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("num",54, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // num ::= NUM_DOUBLE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolDouble(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("num",54, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // opBol ::= b 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opBol",61, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // b ::= b AND b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // b ::= b OR b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // b ::= NOT b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // b ::= OPEN_BRK b CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // b ::= opRel 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // b ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // b ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // b ::= subprogramCall 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // opRel ::= r 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opRel",63, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // r ::= expRel rel expRel 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("r",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // r ::= error 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		mp.printSintaxError("Error de expresion relacional");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("r",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // rel ::= HIGHER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // rel ::= LOWER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // rel ::= HIGHER_EQ 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // rel ::= LOWER_EQ 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // rel ::= NOT_EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // rel ::= EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expRel ::= er 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("expRel",65, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // er ::= er MULTI er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // er ::= er MINUS er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // er ::= er DIVISION er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // er ::= er MODULE er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // er ::= er PLUS er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // er ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // er ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // er ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // er ::= subprogramCall 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // bool ::= TRUE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolBoolean(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bool",55, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // bool ::= FALSE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolBoolean(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bool",55, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // tipo ::= BYTE 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // tipo ::= LONG 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // tipo ::= DOUBLE 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // tipo ::= VOID 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
