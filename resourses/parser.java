
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo3d.backend.analizadores;

import java_cup.runtime.*;
import codigo3d.backend.manejadores.*;
import codigo3d.backend.objetos.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\312\000\002\002\004\000\002\012\005\000\002\012" +
    "\004\000\002\012\003\000\002\121\002\000\002\011\007" +
    "\000\002\011\005\000\002\011\003\000\002\005\005\000" +
    "\002\005\004\000\002\013\004\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\122\002\000\002\111" +
    "\007\000\002\006\004\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\116\005\000\002\120\004" +
    "\000\002\120\005\000\002\117\005\000\002\117\003\000" +
    "\002\115\005\000\002\113\004\000\002\113\005\000\002" +
    "\112\005\000\002\112\003\000\002\114\004\000\002\015" +
    "\007\000\002\015\005\000\002\015\005\000\002\015\004" +
    "\000\002\026\004\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\004\004\000\002\004\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\003" +
    "\005\000\002\025\005\000\002\025\003\000\002\024\003" +
    "\000\002\024\003\000\002\022\004\000\002\017\004\000" +
    "\002\032\004\000\002\032\003\000\002\033\005\000\002" +
    "\033\003\000\002\037\004\000\002\037\003\000\002\036" +
    "\005\000\002\123\002\000\002\036\005\000\002\034\007" +
    "\000\002\035\005\000\002\035\003\000\002\030\006\000" +
    "\002\031\004\000\002\040\007\000\002\040\007\000\002" +
    "\041\003\000\002\042\005\000\002\042\004\000\002\042" +
    "\004\000\002\042\003\000\002\043\004\000\002\043\003" +
    "\000\002\044\007\000\002\045\004\000\002\046\005\000" +
    "\002\046\004\000\002\046\004\000\002\046\003\000\002" +
    "\047\004\000\002\047\003\000\002\050\007\000\002\051" +
    "\004\000\002\052\007\000\002\053\003\000\002\053\003" +
    "\000\002\057\010\000\002\060\003\000\002\060\003\000" +
    "\002\055\014\000\002\056\003\000\002\056\003\000\002" +
    "\107\007\000\002\107\007\000\002\110\007\000\002\110" +
    "\007\000\002\061\005\000\002\062\005\000\002\063\005" +
    "\000\002\064\005\000\002\066\005\000\002\066\003\000" +
    "\002\067\005\000\002\067\003\000\002\065\003\000\002" +
    "\054\003\000\002\054\003\000\002\023\004\000\002\021" +
    "\004\000\002\020\004\000\002\074\003\000\002\076\003" +
    "\000\002\100\005\000\002\100\005\000\002\100\005\000" +
    "\002\100\005\000\002\100\005\000\002\100\005\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\075\003" +
    "\000\002\077\005\000\002\077\005\000\002\077\005\000" +
    "\002\077\005\000\002\077\005\000\002\077\005\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\101\003\000" +
    "\002\102\005\000\002\102\005\000\002\102\004\000\002" +
    "\102\005\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\103\003\000\002\104\005" +
    "\000\002\070\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\105\003\000\002\106\005\000\002\106\005\000\002\106" +
    "\005\000\002\106\005\000\002\106\005\000\002\106\003" +
    "\000\002\106\003\000\002\106\003\000\002\106\003\000" +
    "\002\073\003\000\002\073\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\034\004\020\005\013\006\012\007\010\010" +
    "\005\011\022\012\036\013\021\021\033\061\015\064\025" +
    "\066\016\067\032\001\002\000\032\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\021\uffcd" +
    "\061\uffcd\066\uffcd\067\uffcd\001\002\000\010\003\uff3c\036" +
    "\uff3c\061\uff3c\001\002\000\032\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\021\ufff4\061" +
    "\ufff4\066\ufff4\067\ufff4\001\002\000\004\061\u0121\001\002" +
    "\000\010\003\uff3d\036\uff3d\061\uff3d\001\002\000\032\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\021\uffce\061\uffce\066\uffce\067\uffce\001\002\000" +
    "\010\003\uff3e\036\uff3e\061\uff3e\001\002\000\010\003\uff3f" +
    "\036\uff3f\061\uff3f\001\002\000\032\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\021\uffcb" +
    "\061\uffcb\066\uffcb\067\uffcb\001\002\000\010\003\074\036" +
    "\075\041\u010b\001\002\000\004\064\025\001\002\000\004" +
    "\002\u011f\001\002\000\010\003\uff40\036\uff40\061\uff40\001" +
    "\002\000\010\003\uff39\036\uff39\061\uff39\001\002\000\010" +
    "\003\uff3b\036\uff3b\061\uff3b\001\002\000\004\002\ufffe\001" +
    "\002\000\032\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\021\ufff5\061\ufff5\066\ufff5\067" +
    "\ufff5\001\002\000\006\002\ufffa\034\164\001\002\000\004" +
    "\040\163\001\002\000\022\017\045\020\052\034\047\055" +
    "\055\056\056\057\043\060\046\061\051\001\002\000\032" +
    "\004\020\005\013\006\012\007\010\010\005\011\022\012" +
    "\036\013\021\021\033\061\015\066\157\067\032\001\002" +
    "\000\032\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\021\ufff6\061\ufff6\066\ufff6\067\ufff6" +
    "\001\002\000\010\003\uff38\036\uff38\061\uff38\001\002\000" +
    "\024\004\020\005\013\006\012\007\010\010\005\011\022" +
    "\012\036\013\021\067\032\001\002\000\032\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\021\uffcc\061\uffcc\066\uffcc\067\uffcc\001\002\000\004\041" +
    "\037\001\002\000\010\003\uff3a\036\uff3a\061\uff3a\001\002" +
    "\000\022\017\045\020\052\034\047\055\055\056\056\057" +
    "\043\060\046\061\051\001\002\000\026\032\uff61\033\uff61" +
    "\035\uff61\037\uff61\040\uff61\042\uff61\043\uff61\044\uff61\045" +
    "\uff61\046\uff61\001\002\000\026\032\uff62\033\uff62\035\uff62" +
    "\037\uff62\040\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046" +
    "\uff62\001\002\000\026\032\uff65\033\uff65\035\uff65\037\uff65" +
    "\040\uff65\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65\001" +
    "\002\000\046\015\uff5e\016\uff5e\032\uff5e\033\uff5e\035\uff5e" +
    "\037\uff5e\040\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046" +
    "\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e" +
    "\001\002\000\004\040\113\001\002\000\032\015\uff42\016" +
    "\uff42\032\uff42\033\uff42\035\uff42\037\uff42\040\uff42\042\uff42" +
    "\043\uff42\044\uff42\045\uff42\046\uff42\001\002\000\046\015" +
    "\uff5f\016\uff5f\032\uff5f\033\uff5f\035\uff5f\037\uff5f\040\uff5f" +
    "\042\uff5f\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050" +
    "\uff5f\051\uff5f\052\uff5f\053\uff5f\054\uff5f\001\002\000\022" +
    "\017\045\020\052\034\047\055\055\056\056\057\043\060" +
    "\046\061\051\001\002\000\026\032\uff66\033\uff66\035\uff66" +
    "\037\uff66\040\uff66\042\uff66\043\uff66\044\uff66\045\uff66\046" +
    "\uff66\001\002\000\034\003\074\032\uff64\033\uff64\034\076" +
    "\035\uff64\036\075\037\uff64\040\uff64\042\uff64\043\uff64\044" +
    "\uff64\045\uff64\046\uff64\001\002\000\032\015\uff41\016\uff41" +
    "\032\uff41\033\uff41\035\uff41\037\uff41\040\uff41\042\uff41\043" +
    "\uff41\044\uff41\045\uff41\046\uff41\001\002\000\010\032\uff7b" +
    "\033\uff7b\040\uff7b\001\002\000\026\032\uff6d\033\uff6d\035" +
    "\uff6d\037\uff6d\040\uff6d\042\060\043\062\044\063\045\061" +
    "\046\057\001\002\000\026\032\uff63\033\uff63\035\uff63\037" +
    "\uff63\040\uff63\042\uff63\043\uff63\044\uff63\045\uff63\046\uff63" +
    "\001\002\000\046\015\uff60\016\uff60\032\uff60\033\uff60\035" +
    "\uff60\037\uff60\040\uff60\042\uff60\043\uff60\044\uff60\045\uff60" +
    "\046\uff60\047\uff60\050\uff60\051\uff60\052\uff60\053\uff60\054" +
    "\uff60\001\002\000\022\017\045\020\052\034\047\055\055" +
    "\056\056\057\043\060\046\061\051\001\002\000\022\017" +
    "\045\020\052\034\047\055\055\056\056\057\043\060\046" +
    "\061\051\001\002\000\022\017\045\020\052\034\047\055" +
    "\055\056\056\057\043\060\046\061\051\001\002\000\022" +
    "\017\045\020\052\034\047\055\055\056\056\057\043\060" +
    "\046\061\051\001\002\000\022\017\045\020\052\034\047" +
    "\055\055\056\056\057\043\060\046\061\051\001\002\000" +
    "\026\032\uff6c\033\uff6c\035\uff6c\037\uff6c\040\uff6c\042\uff6c" +
    "\043\uff6c\044\uff6c\045\uff6c\046\uff6c\001\002\000\026\032" +
    "\uff6b\033\uff6b\035\uff6b\037\uff6b\040\uff6b\042\uff6b\043\uff6b" +
    "\044\063\045\061\046\057\001\002\000\026\032\uff6a\033" +
    "\uff6a\035\uff6a\037\uff6a\040\uff6a\042\uff6a\043\uff6a\044\uff6a" +
    "\045\uff6a\046\uff6a\001\002\000\026\032\uff68\033\uff68\035" +
    "\uff68\037\uff68\040\uff68\042\uff68\043\062\044\063\045\061" +
    "\046\057\001\002\000\026\032\uff69\033\uff69\035\uff69\037" +
    "\uff69\040\uff69\042\uff69\043\uff69\044\uff69\045\uff69\046\uff69" +
    "\001\002\000\004\040\110\001\002\000\054\003\074\015" +
    "\uffaa\016\uffaa\032\uffaa\033\uffaa\035\uffaa\036\075\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\001\002\000\054\003\uffb6\015\uffb6\016\uffb6\032\uffb6\033" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\001\002\000\054\003\uffb4" +
    "\015\uffb4\016\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\001\002\000\022\017\045\020\052\034\047\055\055" +
    "\056\056\057\043\060\046\061\051\001\002\000\024\017" +
    "\045\020\052\034\047\035\100\055\055\056\056\057\043" +
    "\060\046\061\051\001\002\000\006\032\102\035\103\001" +
    "\002\000\004\040\uffe2\001\002\000\006\032\uffdf\035\uffdf" +
    "\001\002\000\022\017\045\020\052\034\047\055\055\056" +
    "\056\057\043\060\046\061\051\001\002\000\004\040\uffe1" +
    "\001\002\000\006\032\uffe0\035\uffe0\001\002\000\004\037" +
    "\106\001\002\000\054\003\uffb5\015\uffb5\016\uffb5\032\uffb5" +
    "\033\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\001\002\000\054\003" +
    "\uffb7\015\uffb7\016\uffb7\032\uffb7\033\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\001\002\000\046\015\uffe3\016\uffe3\032\uffe3\033" +
    "\uffe3\035\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053" +
    "\uffe3\054\uffe3\001\002\000\016\035\112\042\060\043\062" +
    "\044\063\045\061\046\057\001\002\000\026\032\uff67\033" +
    "\uff67\035\uff67\037\uff67\040\uff67\042\uff67\043\uff67\044\uff67" +
    "\045\uff67\046\uff67\001\002\000\062\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\037\uffab\061\uffab\062\uffab\063\uffab\065\uffab" +
    "\066\uffab\067\uffab\001\002\000\006\003\115\036\116\001" +
    "\002\000\004\037\uffb0\001\002\000\022\017\045\020\052" +
    "\034\134\055\137\056\056\057\043\060\046\061\135\001" +
    "\002\000\010\003\115\036\116\061\123\001\002\000\010" +
    "\003\uffb2\036\uffb2\061\uffb2\001\002\000\006\032\124\040" +
    "\125\001\002\000\010\003\uffb3\036\uffb3\061\uffb3\001\002" +
    "\000\006\032\uffac\040\uffac\001\002\000\004\061\126\001" +
    "\002\000\062\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\021\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\037\uffae" +
    "\061\uffae\062\uffae\063\uffae\065\uffae\066\uffae\067\uffae\001" +
    "\002\000\006\032\uffad\040\uffad\001\002\000\020\035\uff6e" +
    "\037\uff6e\042\uff6e\043\uff6e\044\uff6e\045\uff6e\046\uff6e\001" +
    "\002\000\016\037\uff7a\042\142\043\144\044\145\045\143" +
    "\046\141\001\002\000\020\035\uff6f\037\uff6f\042\uff6f\043" +
    "\uff6f\044\uff6f\045\uff6f\046\uff6f\001\002\000\020\035\uff72" +
    "\037\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72\001" +
    "\002\000\004\037\154\001\002\000\022\017\045\020\052" +
    "\034\134\055\137\056\056\057\043\060\046\061\135\001" +
    "\002\000\026\003\074\034\076\035\uff71\036\075\037\uff71" +
    "\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\001\002\000" +
    "\020\035\uff73\037\uff73\042\uff73\043\uff73\044\uff73\045\uff73" +
    "\046\uff73\001\002\000\020\035\uff70\037\uff70\042\uff70\043" +
    "\uff70\044\uff70\045\uff70\046\uff70\001\002\000\016\035\146" +
    "\042\142\043\144\044\145\045\143\046\141\001\002\000" +
    "\022\017\045\020\052\034\134\055\137\056\056\057\043" +
    "\060\046\061\135\001\002\000\022\017\045\020\052\034" +
    "\134\055\137\056\056\057\043\060\046\061\135\001\002" +
    "\000\022\017\045\020\052\034\134\055\137\056\056\057" +
    "\043\060\046\061\135\001\002\000\022\017\045\020\052" +
    "\034\134\055\137\056\056\057\043\060\046\061\135\001" +
    "\002\000\022\017\045\020\052\034\134\055\137\056\056" +
    "\057\043\060\046\061\135\001\002\000\020\035\uff74\037" +
    "\uff74\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\001\002" +
    "\000\020\035\uff79\037\uff79\042\uff79\043\uff79\044\uff79\045" +
    "\uff79\046\uff79\001\002\000\020\035\uff78\037\uff78\042\uff78" +
    "\043\uff78\044\145\045\143\046\141\001\002\000\020\035" +
    "\uff77\037\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77" +
    "\001\002\000\020\035\uff75\037\uff75\042\uff75\043\144\044" +
    "\145\045\143\046\141\001\002\000\020\035\uff76\037\uff76" +
    "\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\001\002\000" +
    "\010\003\uffb1\036\uffb1\061\uffb1\001\002\000\004\037\156" +
    "\001\002\000\010\003\uffaf\036\uffaf\061\uffaf\001\002\000" +
    "\004\064\025\001\002\000\032\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\021\ufff7\061" +
    "\ufff7\066\ufff7\067\ufff7\001\002\000\004\002\000\001\002" +
    "\000\006\033\uff7d\040\uff7d\001\002\000\062\004\uff7e\005" +
    "\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e" +
    "\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027" +
    "\uff7e\030\uff7e\031\uff7e\037\uff7e\061\uff7e\062\uff7e\063\uff7e" +
    "\065\uff7e\066\uff7e\067\uff7e\001\002\000\004\035\165\001" +
    "\002\000\006\002\ufffb\036\ufffd\001\002\000\004\036\167" +
    "\001\002\000\052\004\020\005\013\006\012\007\010\010" +
    "\005\011\022\012\036\013\021\021\033\022\175\025\206" +
    "\026\217\027\173\030\216\031\172\037\202\061\015\062" +
    "\214\063\220\067\032\001\002\000\004\002\ufffc\001\002" +
    "\000\060\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\037\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\065\uffc7\067\uffc7\001\002\000\004" +
    "\036\u0117\001\002\000\004\034\u0108\001\002\000\052\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\021\uffcf\022\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\037\uffcf\061\uffcf\062\uffcf\063\uffcf\067\uffcf" +
    "\001\002\000\004\034\350\001\002\000\052\004\020\005" +
    "\013\006\012\007\010\010\005\011\022\012\036\013\021" +
    "\021\033\022\175\025\206\026\217\027\173\030\216\031" +
    "\172\037\347\061\015\062\214\063\220\067\032\001\002" +
    "\000\060\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\037\uffc5\061" +
    "\uffc5\062\uffc5\063\uffc5\065\uffc5\067\uffc5\001\002\000\060" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\013\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\037\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\065\uffc6\067\uffc6\001\002\000\060\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\037\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\065\uffc1\067\uffc1\001\002\000\062\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\037\ufff8\061\ufff8\062\ufff8\063" +
    "\ufff8\065\ufff8\067\ufff8\001\002\000\004\061\340\001\002" +
    "\000\060\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\037\uffc9\061" +
    "\uffc9\062\uffc9\063\uffc9\065\uffc9\067\uffc9\001\002\000\060" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\013\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\037\uffc4\061\uffc4\062" +
    "\uffc4\063\uffc4\065\uffc4\067\uffc4\001\002\000\004\034\326" +
    "\001\002\000\060\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\037" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\065\uffc0\067\uffc0\001\002" +
    "\000\060\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\037\uffc8\061" +
    "\uffc8\062\uffc8\063\uffc8\065\uffc8\067\uffc8\001\002\000\060" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\037\uffc2\061\uffc2\062" +
    "\uffc2\063\uffc2\065\uffc2\067\uffc2\001\002\000\060\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\037\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\065\uffbf\067\uffbf\001\002\000\060\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\031\uffca\037\uffca\061\uffca\062\uffca\063\uffca\065" +
    "\uffca\067\uffca\001\002\000\004\036\317\001\002\000\060" +
    "\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\037\uffc3\061\uffc3\062" +
    "\uffc3\063\uffc3\065\uffc3\067\uffc3\001\002\000\004\036\306" +
    "\001\002\000\052\004\020\005\013\006\012\007\010\010" +
    "\005\011\022\012\036\013\021\021\033\022\175\025\206" +
    "\026\217\027\173\030\216\031\172\036\167\061\015\062" +
    "\214\063\220\067\032\001\002\000\004\036\221\001\002" +
    "\000\004\061\223\001\002\000\004\037\226\001\002\000" +
    "\010\003\074\036\075\037\224\001\002\000\004\040\225" +
    "\001\002\000\060\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\037" +
    "\uff8b\061\uff8b\062\uff8b\063\uff8b\065\uff8b\067\uff8b\001\002" +
    "\000\004\040\227\001\002\000\060\004\uff8a\005\uff8a\006" +
    "\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\021\uff8a" +
    "\022\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030" +
    "\uff8a\031\uff8a\037\uff8a\061\uff8a\062\uff8a\063\uff8a\065\uff8a" +
    "\067\uff8a\001\002\000\004\025\uff91\001\002\000\004\025" +
    "\uff92\001\002\000\004\025\233\001\002\000\004\034\234" +
    "\001\002\000\022\014\236\017\045\020\052\034\246\056" +
    "\056\057\043\060\046\061\237\001\002\000\004\035\305" +
    "\001\002\000\022\014\236\017\045\020\052\034\246\056" +
    "\056\057\043\060\046\061\237\001\002\000\046\003\074" +
    "\015\uff57\016\uff57\033\uff57\034\076\035\uff57\036\075\042" +
    "\uff44\043\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44" +
    "\051\uff44\052\uff44\053\uff44\054\uff44\001\002\000\040\015" +
    "\uff46\016\uff46\033\uff46\035\uff46\042\uff46\043\uff46\044\uff46" +
    "\045\uff46\046\uff46\047\uff46\050\uff46\051\uff46\052\uff46\053" +
    "\uff46\054\uff46\001\002\000\012\015\uff56\016\uff56\033\uff56" +
    "\035\uff56\001\002\000\016\047\302\050\300\051\276\052" +
    "\301\053\274\054\277\001\002\000\012\015\uff54\016\uff54" +
    "\033\uff54\035\uff54\001\002\000\012\015\uff58\016\uff58\033" +
    "\uff58\035\uff58\001\002\000\040\015\uff55\016\uff55\033\uff55" +
    "\035\uff55\042\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047" +
    "\uff43\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43\001\002" +
    "\000\022\014\236\017\045\020\052\034\246\056\056\057" +
    "\043\060\046\061\237\001\002\000\012\015\266\016\267" +
    "\033\uff5d\035\uff5d\001\002\000\040\015\uff4c\016\uff4c\033" +
    "\uff4c\035\uff4c\042\253\043\255\044\256\045\254\046\252" +
    "\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c\001" +
    "\002\000\040\015\uff45\016\uff45\033\uff45\035\uff45\042\uff45" +
    "\043\uff45\044\uff45\045\uff45\046\uff45\047\uff45\050\uff45\051" +
    "\uff45\052\uff45\053\uff45\054\uff45\001\002\000\012\056\056" +
    "\057\043\060\046\061\261\001\002\000\012\056\056\057" +
    "\043\060\046\061\261\001\002\000\012\056\056\057\043" +
    "\060\046\061\261\001\002\000\012\056\056\057\043\060" +
    "\046\061\261\001\002\000\012\056\056\057\043\060\046" +
    "\061\261\001\002\000\040\015\uff43\016\uff43\033\uff43\035" +
    "\uff43\042\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047\uff43" +
    "\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43\001\002\000" +
    "\040\015\uff4b\016\uff4b\033\uff4b\035\uff4b\042\uff4b\043\uff4b" +
    "\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052" +
    "\uff4b\053\uff4b\054\uff4b\001\002\000\046\003\074\015\uff44" +
    "\016\uff44\033\uff44\034\076\035\uff44\036\075\042\uff44\043" +
    "\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44" +
    "\052\uff44\053\uff44\054\uff44\001\002\000\040\015\uff4a\016" +
    "\uff4a\033\uff4a\035\uff4a\042\uff4a\043\uff4a\044\256\045\254" +
    "\046\252\047\uff4a\050\uff4a\051\uff4a\052\uff4a\053\uff4a\054" +
    "\uff4a\001\002\000\040\015\uff49\016\uff49\033\uff49\035\uff49" +
    "\042\uff49\043\uff49\044\uff49\045\uff49\046\uff49\047\uff49\050" +
    "\uff49\051\uff49\052\uff49\053\uff49\054\uff49\001\002\000\040" +
    "\015\uff47\016\uff47\033\uff47\035\uff47\042\uff47\043\255\044" +
    "\256\045\254\046\252\047\uff47\050\uff47\051\uff47\052\uff47" +
    "\053\uff47\054\uff47\001\002\000\040\015\uff48\016\uff48\033" +
    "\uff48\035\uff48\042\uff48\043\uff48\044\uff48\045\uff48\046\uff48" +
    "\047\uff48\050\uff48\051\uff48\052\uff48\053\uff48\054\uff48\001" +
    "\002\000\022\014\236\017\045\020\052\034\246\056\056" +
    "\057\043\060\046\061\237\001\002\000\022\014\236\017" +
    "\045\020\052\034\246\056\056\057\043\060\046\061\237" +
    "\001\002\000\012\015\266\016\uff5b\033\uff5b\035\uff5b\001" +
    "\002\000\012\015\uff5c\016\uff5c\033\uff5c\035\uff5c\001\002" +
    "\000\010\015\266\016\267\035\273\001\002\000\012\015" +
    "\uff59\016\uff59\033\uff59\035\uff59\001\002\000\012\056\uff4e" +
    "\057\uff4e\060\uff4e\061\uff4e\001\002\000\012\056\056\057" +
    "\043\060\046\061\261\001\002\000\012\056\uff51\057\uff51" +
    "\060\uff51\061\uff51\001\002\000\012\056\uff4d\057\uff4d\060" +
    "\uff4d\061\uff4d\001\002\000\012\056\uff50\057\uff50\060\uff50" +
    "\061\uff50\001\002\000\012\056\uff52\057\uff52\060\uff52\061" +
    "\uff52\001\002\000\012\056\uff4f\057\uff4f\060\uff4f\061\uff4f" +
    "\001\002\000\012\015\uff53\016\uff53\033\uff53\035\uff53\001" +
    "\002\000\012\015\uff5a\016\uff5a\033\uff5a\035\uff5a\001\002" +
    "\000\060\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011" +
    "\uff93\012\uff93\013\uff93\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\037\uff93\061" +
    "\uff93\062\uff93\063\uff93\065\uff93\067\uff93\001\002\000\022" +
    "\017\045\020\052\034\047\055\055\056\056\057\043\060" +
    "\046\061\051\001\002\000\004\040\310\001\002\000\060" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012" +
    "\uff89\013\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\037\uff89\061\uff89\062" +
    "\uff89\063\uff89\065\uff89\067\uff89\001\002\000\006\032\314" +
    "\037\315\001\002\000\006\032\uff81\037\uff81\001\002\000" +
    "\006\032\uff84\037\uff84\001\002\000\022\017\045\020\052" +
    "\034\047\055\055\056\056\057\043\060\046\061\051\001" +
    "\002\000\004\040\uff87\001\002\000\006\032\uff85\037\uff85" +
    "\001\002\000\004\061\321\001\002\000\004\037\324\001" +
    "\002\000\010\003\074\036\075\037\322\001\002\000\004" +
    "\040\323\001\002\000\060\004\uff8d\005\uff8d\006\uff8d\007" +
    "\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\021\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031" +
    "\uff8d\037\uff8d\061\uff8d\062\uff8d\063\uff8d\065\uff8d\067\uff8d" +
    "\001\002\000\004\040\325\001\002\000\060\004\uff8c\005" +
    "\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\037\uff8c\061\uff8c\062\uff8c\063\uff8c" +
    "\065\uff8c\067\uff8c\001\002\000\022\014\236\017\045\020" +
    "\052\034\246\056\056\057\043\060\046\061\237\001\002" +
    "\000\004\035\330\001\002\000\052\004\020\005\013\006" +
    "\012\007\010\010\005\011\022\012\036\013\021\021\033" +
    "\022\175\025\206\026\217\027\173\030\216\031\172\036" +
    "\167\061\015\062\214\063\220\067\032\001\002\000\060" +
    "\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012" +
    "\uff94\013\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\037\uff94\061\uff94\062" +
    "\uff94\063\uff94\065\uff94\067\uff94\001\002\000\060\004\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\037\uff95\061\uff95\062\uff95\063" +
    "\uff95\065\uff95\067\uff95\001\002\000\060\004\uff96\005\uff96" +
    "\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\021" +
    "\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96" +
    "\030\uff96\031\uff96\037\uff96\061\uff96\062\uff96\063\uff96\065" +
    "\uff96\067\uff96\001\002\000\006\032\uffbc\040\uffbc\001\002" +
    "\000\006\032\343\040\344\001\002\000\022\017\045\020" +
    "\052\034\047\055\055\056\056\057\043\060\046\061\051" +
    "\001\002\000\006\032\uffbb\040\uffbb\001\002\000\010\032" +
    "\uffba\040\uffba\041\341\001\002\000\022\017\uffb8\020\uffb8" +
    "\034\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\001" +
    "\002\000\006\032\uffb9\040\uffb9\001\002\000\004\061\340" +
    "\001\002\000\062\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\037" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\065\uffbe\066\uffbe\067\uffbe" +
    "\001\002\000\006\032\uffbd\040\uffbd\001\002\000\052\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0" +
    "\013\uffd0\021\uffd0\022\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\037\uffd0\061\uffd0\062\uffd0\063\uffd0\067\uffd0" +
    "\001\002\000\062\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\037\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\067\ufff9" +
    "\001\002\000\022\014\236\017\045\020\052\034\246\056" +
    "\056\057\043\060\046\061\237\001\002\000\004\035\uffa7" +
    "\001\002\000\004\035\353\001\002\000\052\004\020\005" +
    "\013\006\012\007\010\010\005\011\022\012\036\013\021" +
    "\021\033\022\175\025\206\026\217\027\173\030\216\031" +
    "\172\036\167\061\015\062\214\063\220\067\032\001\002" +
    "\000\060\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\021\uff9b\022\uff9b\023\377\024\375" +
    "\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\037\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\065\uff9b\067\uff9b\001\002\000\060" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\013\uffa3\021\uffa3\022\uffa3\023\363\024\361\025\uffa3" +
    "\026\uffa3\027\uffa3\030\uffa3\031\uffa3\037\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\065\uffa3\067\uffa3\001\002\000\060\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\037\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\065\uffa8\067\uffa8\001\002\000\060\004\uffa9\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\030\uffa9\031\uffa9\037\uffa9\061\uffa9\062\uffa9\063\uffa9\065" +
    "\uffa9\067\uffa9\001\002\000\060\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\037\uffa4\061\uffa4\062\uffa4\063\uffa4\065\uffa4\067" +
    "\uffa4\001\002\000\050\004\020\005\013\006\012\007\010" +
    "\010\005\011\022\012\036\013\021\021\033\022\175\025" +
    "\206\026\217\027\173\030\216\031\172\061\015\062\214" +
    "\063\220\067\032\001\002\000\060\004\uffa1\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\037\uffa1\061\uffa1\062\uffa1\063\uffa1\065\uffa1" +
    "\067\uffa1\001\002\000\004\034\367\001\002\000\060\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\021\uffa5\022\uffa5\023\363\024\361\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\037\uffa5\061\uffa5\062\uffa5" +
    "\063\uffa5\065\uffa5\067\uffa5\001\002\000\060\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\037\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\065\uffa6\067\uffa6\001\002\000\060\004\uffa2\005\uffa2\006" +
    "\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\037\uffa2\061\uffa2\062\uffa2\063\uffa2\065\uffa2" +
    "\067\uffa2\001\002\000\022\014\236\017\045\020\052\034" +
    "\246\056\056\057\043\060\046\061\237\001\002\000\004" +
    "\035\371\001\002\000\050\004\020\005\013\006\012\007" +
    "\010\010\005\011\022\012\036\013\021\021\033\022\175" +
    "\025\206\026\217\027\173\030\216\031\172\061\015\062" +
    "\214\063\220\067\032\001\002\000\060\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\037\uffa0\061\uffa0\062\uffa0\063\uffa0\065" +
    "\uffa0\067\uffa0\001\002\000\060\004\uff9f\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\037\uff9f\061\uff9f\062\uff9f\063\uff9f\065\uff9f\067" +
    "\uff9f\001\002\000\060\004\uff9c\005\uff9c\006\uff9c\007\uff9c" +
    "\010\uff9c\011\uff9c\012\uff9c\013\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\037\uff9c\061\uff9c\062\uff9c\063\uff9c\065\uff9c\067\uff9c\001" +
    "\002\000\004\036\167\001\002\000\060\004\uff99\005\uff99" +
    "\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\021" +
    "\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99" +
    "\030\uff99\031\uff99\037\uff99\061\uff99\062\uff99\063\uff99\065" +
    "\uff99\067\uff99\001\002\000\004\034\u0103\001\002\000\060" +
    "\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012" +
    "\uff9d\013\uff9d\021\uff9d\022\uff9d\023\377\024\375\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\037\uff9d\061\uff9d\062" +
    "\uff9d\063\uff9d\065\uff9d\067\uff9d\001\002\000\060\004\uff9e" +
    "\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e" +
    "\027\uff9e\030\uff9e\031\uff9e\037\uff9e\061\uff9e\062\uff9e\063" +
    "\uff9e\065\uff9e\067\uff9e\001\002\000\060\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\037\uff9a\061\uff9a\062\uff9a\063\uff9a\065" +
    "\uff9a\067\uff9a\001\002\000\022\014\236\017\045\020\052" +
    "\034\246\056\056\057\043\060\046\061\237\001\002\000" +
    "\004\035\u0105\001\002\000\004\036\167\001\002\000\060" +
    "\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\013\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\026\uff98\027\uff98\030\uff98\031\uff98\037\uff98\061\uff98\062" +
    "\uff98\063\uff98\065\uff98\067\uff98\001\002\000\060\004\uff97" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\037\uff97\061\uff97\062\uff97\063" +
    "\uff97\065\uff97\067\uff97\001\002\000\004\061\u010a\001\002" +
    "\000\004\033\u010c\001\002\000\004\041\u010b\001\002\000" +
    "\022\017\uff7c\020\uff7c\034\uff7c\055\uff7c\056\uff7c\057\uff7c" +
    "\060\uff7c\061\uff7c\001\002\000\022\014\236\017\045\020" +
    "\052\034\246\056\056\057\043\060\046\061\237\001\002" +
    "\000\004\033\u010e\001\002\000\006\042\u010f\043\u0111\001" +
    "\002\000\004\056\uff80\001\002\000\004\056\u0112\001\002" +
    "\000\004\056\uff7f\001\002\000\004\035\u0113\001\002\000" +
    "\052\004\020\005\013\006\012\007\010\010\005\011\022" +
    "\012\036\013\021\021\033\022\175\025\206\026\217\027" +
    "\173\030\216\031\172\036\167\061\015\062\214\063\220" +
    "\067\032\001\002\000\060\004\uff90\005\uff90\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\013\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\037\uff90\061\uff90\062\uff90\063\uff90\065\uff90\067\uff90" +
    "\001\002\000\060\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\011\uff8e\012\uff8e\013\uff8e\021\uff8e\022\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\037" +
    "\uff8e\061\uff8e\062\uff8e\063\uff8e\065\uff8e\067\uff8e\001\002" +
    "\000\060\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011" +
    "\uff8f\012\uff8f\013\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\037\uff8f\061" +
    "\uff8f\062\uff8f\063\uff8f\065\uff8f\067\uff8f\001\002\000\022" +
    "\017\045\020\052\034\047\055\055\056\056\057\043\060" +
    "\046\061\051\001\002\000\004\040\u0119\001\002\000\060" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\037\uff88\061\uff88\062" +
    "\uff88\063\uff88\065\uff88\067\uff88\001\002\000\006\032\uff82" +
    "\037\uff82\001\002\000\006\032\u011c\037\u011d\001\002\000" +
    "\022\017\045\020\052\034\047\055\055\056\056\057\043" +
    "\060\046\061\051\001\002\000\004\040\uff86\001\002\000" +
    "\006\032\uff83\037\uff83\001\002\000\004\002\001\001\002" +
    "\000\004\002\uffff\001\002\000\012\032\uffba\034\ufff3\040" +
    "\uffba\041\341\001\002\000\004\034\u0123\001\002\000\026" +
    "\004\020\005\013\006\012\007\010\010\005\011\022\012" +
    "\036\013\021\035\u0145\067\032\001\002\000\004\036\u0125" +
    "\001\002\000\054\004\020\005\013\006\012\007\010\010" +
    "\005\011\022\012\036\013\021\021\033\022\175\025\206" +
    "\026\217\027\173\030\216\031\172\037\u012d\061\015\062" +
    "\214\063\220\065\u0129\067\032\001\002\000\032\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\021\ufff2\061\ufff2\066\ufff2\067\ufff2\001\002\000\030" +
    "\022\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\037" +
    "\uffef\061\uffef\062\uffef\063\uffef\065\uffef\001\002\000\032" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\021\uffd1\037\uffd1\066\uffd1\067\uffd1\001\002" +
    "\000\022\017\045\020\052\034\047\055\055\056\056\057" +
    "\043\060\046\061\051\001\002\000\030\022\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\037\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\065\uffeb\001\002\000\030\022\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\037\uffea\061\uffea\062" +
    "\uffea\063\uffea\065\uffea\001\002\000\030\022\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\037\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\065\uffe6\001\002\000\032\004\uffd5\005\uffd5" +
    "\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\021" +
    "\uffd5\061\uffd5\066\uffd5\067\uffd5\001\002\000\030\022\uffed" +
    "\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\037\uffed\061" +
    "\uffed\062\uffed\063\uffed\065\uffed\001\002\000\030\022\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\037\uffe9\061" +
    "\uffe9\062\uffe9\063\uffe9\065\uffe9\001\002\000\030\022\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\037\uffee\061" +
    "\uffee\062\uffee\063\uffee\065\uffee\001\002\000\032\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\021\uffd3\037\uffd3\066\uffd3\067\uffd3\001\002\000\030" +
    "\022\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\037" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\065\uffe5\001\002\000\030" +
    "\022\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\037" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\065\ufff0\001\002\000\030" +
    "\022\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\037" +
    "\uffec\061\uffec\062\uffec\063\uffec\065\uffec\001\002\000\030" +
    "\022\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\037" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\065\uffe7\001\002\000\030" +
    "\022\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\037" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\065\uffe4\001\002\000\032" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\021\uffd2\037\uffd2\066\uffd2\067\uffd2\001\002" +
    "\000\030\022\175\025\206\026\217\027\173\030\216\031" +
    "\172\037\u0141\061\015\062\214\063\220\065\u0129\001\002" +
    "\000\030\022\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\037\uffe8\061\uffe8\062\uffe8\063\uffe8\065\uffe8\001\002" +
    "\000\032\004\020\005\013\006\012\007\010\010\005\011" +
    "\022\012\036\013\021\021\033\037\u013d\066\u013b\067\032" +
    "\001\002\000\026\022\175\025\206\026\217\027\173\030" +
    "\216\031\172\061\015\062\214\063\220\065\u0129\001\002" +
    "\000\032\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\021\uffd4\037\uffd4\066\uffd4\067\uffd4" +
    "\001\002\000\032\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\021\uffd7\061\uffd7\066\uffd7" +
    "\067\uffd7\001\002\000\030\022\175\025\206\026\217\027" +
    "\173\030\216\031\172\037\u013f\061\015\062\214\063\220" +
    "\065\u0129\001\002\000\032\004\uffd8\005\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\021\uffd8\061\uffd8" +
    "\066\uffd8\067\uffd8\001\002\000\030\022\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\037\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\065\ufff1\001\002\000\032\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\021\uffd6" +
    "\061\uffd6\066\uffd6\067\uffd6\001\002\000\004\040\u0143\001" +
    "\002\000\030\022\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\037\uffde\061\uffde\062\uffde\063\uffde\065\uffde\001" +
    "\002\000\006\032\uffda\035\uffda\001\002\000\004\036\uffdd" +
    "\001\002\000\004\061\u014b\001\002\000\006\032\u0148\035" +
    "\u0149\001\002\000\024\004\020\005\013\006\012\007\010" +
    "\010\005\011\022\012\036\013\021\067\032\001\002\000" +
    "\004\036\uffdc\001\002\000\006\032\uffdb\035\uffdb\001\002" +
    "\000\006\032\uffd9\035\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\036\003\010\011\022\012\016\013\027\014" +
    "\030\016\005\020\026\021\025\023\003\030\033\031\034" +
    "\034\013\071\006\111\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\335\022\336" +
    "\024\333\025\334\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\071\033\072\001\001\000\004\011\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\041\072\047" +
    "\073\040\074\161\075\052\077\053\116\037\001\001\000" +
    "\030\003\010\014\157\016\005\020\026\021\025\023\003" +
    "\030\033\031\034\034\013\071\006\111\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\031\041\072\047\073\040\074\043\075\052\077\053" +
    "\116\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\031\041\072\047\073" +
    "\040\077\110\116\037\001\001\000\002\001\001\000\010" +
    "\032\071\033\072\120\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\031\041\072\047\073\040\077\067\116" +
    "\037\001\001\000\014\031\041\072\047\073\040\077\066" +
    "\116\037\001\001\000\014\031\041\072\047\073\040\077" +
    "\065\116\037\001\001\000\014\031\041\072\047\073\040" +
    "\077\064\116\037\001\001\000\014\031\041\072\047\073" +
    "\040\077\063\116\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\031\041\072\047\073" +
    "\040\075\104\077\053\116\037\001\001\000\020\031\041" +
    "\072\047\073\040\075\100\077\053\116\037\117\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\031\041\072\047\073\040\075\103\077\053\116" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\117\037\116\001\001\000\004\123\154\001" +
    "\001\000\016\031\131\072\135\073\130\076\132\100\127" +
    "\116\126\001\001\000\006\035\120\036\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\031\131\072" +
    "\135\073\130\100\137\116\126\001\001\000\010\032\071" +
    "\033\072\120\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\031\131\072\135\073\130" +
    "\100\152\116\126\001\001\000\014\031\131\072\135\073" +
    "\130\100\151\116\126\001\001\000\014\031\131\072\135" +
    "\073\130\100\150\116\126\001\001\000\014\031\131\072" +
    "\135\073\130\100\147\116\126\001\001\000\014\031\131" +
    "\072\135\073\130\100\146\116\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\165\001\001" +
    "\000\004\005\167\001\001\000\046\002\173\003\212\004" +
    "\175\020\026\021\025\023\203\030\207\031\034\034\170" +
    "\040\177\052\176\055\204\057\214\061\210\062\200\071" +
    "\202\107\206\110\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\u0117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\002\345\003\212" +
    "\020\026\021\025\023\203\030\207\031\034\034\170\040" +
    "\177\052\176\055\204\057\214\061\210\062\200\071\202" +
    "\107\206\110\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\335" +
    "\022\336\024\333\025\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\306" +
    "\001\001\000\050\002\230\003\212\005\227\020\026\021" +
    "\025\023\203\030\207\031\034\034\170\040\177\052\176" +
    "\055\204\057\214\060\231\061\210\062\200\071\202\107" +
    "\206\110\211\001\001\000\002\001\001\000\004\031\221" +
    "\001\001\000\002\001\001\000\006\032\071\033\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\031\250\072\237" +
    "\073\240\101\234\102\246\103\243\104\242\105\241\106" +
    "\247\116\244\001\001\000\002\001\001\000\024\031\250" +
    "\072\237\073\240\102\303\103\243\104\242\105\241\106" +
    "\247\116\244\001\001\000\010\032\071\033\072\120\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\031\250\072\237\073\240\102\271\103" +
    "\243\104\242\105\241\106\247\116\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\250\072\237\106\264\116\256\001\001\000\012\031\250" +
    "\072\237\106\263\116\256\001\001\000\012\031\250\072" +
    "\237\106\262\116\256\001\001\000\012\031\250\072\237" +
    "\106\261\116\256\001\001\000\012\031\250\072\237\106" +
    "\257\116\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\071\033\072\120\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\031\250\072\237\073\240\102\270\103\243\104" +
    "\242\105\241\106\247\116\244\001\001\000\024\031\250" +
    "\072\237\073\240\102\267\103\243\104\242\105\241\106" +
    "\247\116\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\031\250\072\237\105\302\106\247\116\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\031\041\065\312\066" +
    "\310\072\047\073\040\075\311\077\053\116\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\041\065\315" +
    "\072\047\073\040\075\311\077\053\116\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\317\001\001" +
    "\000\002\001\001\000\006\032\071\033\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\031\250\072\237\073\240\101\326\102" +
    "\246\103\243\104\242\105\241\106\247\116\244\001\001" +
    "\000\002\001\001\000\050\002\331\003\212\005\330\020" +
    "\026\021\025\023\203\030\207\031\034\034\170\040\177" +
    "\052\176\053\332\055\204\057\214\061\210\062\200\071" +
    "\202\107\206\110\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\031\041\072\047\073\040\074\341\075\052" +
    "\077\053\116\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\335" +
    "\022\336\024\344\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\031\250" +
    "\041\351\072\237\073\240\101\350\102\246\103\243\104" +
    "\242\105\241\106\247\116\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\002\354\003\212\005\353\020" +
    "\026\021\025\023\203\030\207\031\034\034\170\040\177" +
    "\042\356\046\355\052\176\055\204\057\214\061\210\062" +
    "\200\071\202\107\206\110\211\001\001\000\010\047\377" +
    "\050\375\051\373\001\001\000\010\043\363\044\361\045" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\002\372\003\212\020\026\021\025\023" +
    "\203\030\207\031\034\034\170\040\177\052\176\055\204" +
    "\057\214\061\210\062\200\071\202\107\206\110\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\365" +
    "\045\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\031\250\072\237\073\240\101\367\102\246\103\243" +
    "\104\242\105\241\106\247\116\244\001\001\000\002\001" +
    "\001\000\044\002\371\003\212\020\026\021\025\023\203" +
    "\030\207\031\034\034\170\040\177\052\176\055\204\057" +
    "\214\061\210\062\200\071\202\107\206\110\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0106\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\u0101\051\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\031\250\072\237\073\240\101\u0103" +
    "\102\246\103\243\104\242\105\241\106\247\116\244\001" +
    "\001\000\002\001\001\000\004\005\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\026\021\u0108\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\031\250\072\237\073\240\101\u010c\102\246\103" +
    "\243\104\242\105\241\106\247\116\244\001\001\000\002" +
    "\001\001\000\004\054\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\002\u0115\003\212\005\u0114\020\026\021\025\023\203\030" +
    "\207\031\034\034\170\040\177\052\176\055\204\056\u0113" +
    "\057\214\061\210\062\200\071\202\107\206\110\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\031\041\065\u0119\067\u011a\072\047\073\040\075" +
    "\311\077\053\116\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\031" +
    "\041\065\u011d\072\047\073\040\075\311\077\053\116\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\122\u0121\001\001\000\004" +
    "\113\u0123\001\001\000\010\071\u0145\112\u0146\114\u0143\001" +
    "\001\000\004\015\u0125\001\001\000\056\003\u0136\006\u0137" +
    "\007\u0132\010\u012f\020\026\021\025\023\u012d\026\u0139\027" +
    "\u0130\030\u0133\031\034\034\u0127\040\u0129\052\u012a\055\u012e" +
    "\057\u0138\061\u0134\062\u012b\071\202\107\u0131\110\u0135\115" +
    "\u0126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\031\041\072\047\073\040\075\u0141\077" +
    "\053\116\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\007\u013f" +
    "\010\u012f\020\026\021\025\023\u012d\030\u0133\031\034\040" +
    "\u0129\052\u012a\055\u012e\057\u0138\061\u0134\062\u012b\107\u0131" +
    "\110\u0135\115\u0126\001\001\000\002\001\001\000\012\003" +
    "\u0136\027\u013b\034\u0127\071\202\001\001\000\044\006\u013d" +
    "\007\u0132\010\u012f\020\026\021\025\023\u012d\030\u0133\031" +
    "\034\040\u0129\052\u012a\055\u012e\057\u0138\061\u0134\062\u012b" +
    "\107\u0131\110\u0135\115\u0126\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\007\u013f\010\u012f\020\026\021\025" +
    "\023\u012d\030\u0133\031\034\040\u0129\052\u012a\055\u012e\057" +
    "\u0138\061\u0134\062\u012b\107\u0131\110\u0135\115\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\071" +
    "\u0145\114\u0149\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private ManejadorParser mp = null;

	// Connect this parser to a scanner!
	public parser(Lexer1 lex, ManejadorParser mp) {
		super(lex);
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
            //mp.printSintaxError("¡Error de sintaxis! -> "+ s.value +" Linea "+(s.left)+" columna "+(s.right) + "\n");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= globalInstruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto start_val = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // globalInstruction ::= bodyInstruction SEPARATOR mainInstruction 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.print(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalInstruction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globalInstruction ::= SEPARATOR mainInstruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.print(null, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalInstruction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globalInstruction ::= mainInstruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.print(null, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("globalInstruction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
mp.setSubprogramaActual(e1);mp.setGlobal(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainInstruction ::= MAIN OPEN_BRK CLOSE_BRK NT$0 block 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.setGlobal(true);RESULT = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainInstruction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mainInstruction ::= MAIN OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainInstruction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainInstruction ::= MAIN 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mainInstruction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= OPEN_SQR instructions CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block ::= OPEN_SQR CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bodyInstruction ::= bodyInstruction bodyInstructionA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getInstructions(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyInstruction",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bodyInstruction ::= bodyInstructionA 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyInstruction",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bodyInstructionA ::= subprogram 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyInstructionA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bodyInstructionA ::= instructionB 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodyInstructionA",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$1 ::= 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
mp.setSubprogramaActual(e2); mp.setGlobal(false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // subprogram ::= tipo VARIABLE NT$1 parametrosA bodySubprogram 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e4 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.verificateSubprogram();mp.setGlobal(true);RESULT = mp.getSubprograma(e2, e4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programInstruction ::= programInstruction programInstructionA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getInstructions(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstruction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programInstruction ::= programInstructionA 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstruction",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programInstructionA ::= rtrn 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e; mp.setSubprogramReturn(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programInstructionA ::= programInstructionB 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;mp.addSubprogramInstruction(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programInstructionB ::= formalAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programInstructionB ::= arrayAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // programInstructionB ::= if 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // programInstructionB ::= while 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // programInstructionB ::= for 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // programInstructionB ::= doWhile 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // programInstructionB ::= print 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // programInstructionB ::= println 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // programInstructionB ::= scans 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // programInstructionB ::= scann 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // subprogramCall ::= VARIABLE paramsA SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mp.getSubprogramCall(e1, e2, e1left, e1right);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramCall",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramsA ::= OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsA",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramsA ::= OPEN_BRK paramsProgram CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsA",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramsProgram ::= paramsProgram COMMA opNum 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getComponentes(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsProgram",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramsProgram ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getComponente(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsProgram",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rtrn ::= RETURN opNum SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mp.getReturn(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rtrn",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametrosA ::= OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosA",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametrosA ::= OPEN_BRK parametros CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosA",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros ::= parametros COMMA parametro 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= parametro 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametro ::= tipo VARIABLE 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bodySubprogram ::= OPEN_SQR declns SEPARATOR programInstruction CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mp.getInstructions(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bodySubprogram ::= OPEN_SQR declns CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bodySubprogram ::= OPEN_SQR programInstruction CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bodySubprogram ::= OPEN_SQR CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declns ::= declns declns1 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declns",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declns ::= declns1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declns",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declns1 ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declns1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declns1 ::= array 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declns1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instructions ::= instructions instruction 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getInstructions(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instructions ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instructionB ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instructionB ::= formalAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instructionB ::= arrayAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instructionB ::= array 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruction ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruction ::= formalAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruction ::= arrayAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruction ::= array 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruction ::= if 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruction ::= while 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruction ::= for 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruction ::= doWhile 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruction ::= print 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruction ::= println 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruction ::= scans 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruction ::= scann 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // decl ::= tipo decls SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // decls ::= decls COMMA decl1 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getInstructions(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // decls ::= decl1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // decl1 ::= assign2 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // decl1 ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assign2 ::= assign3 exp 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.asignByToken(e1,e2, e1left, e1right);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assign3 ::= VARIABLE ASSIGN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign3",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // arrayDim ::= arrayDim arrayDim1 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getComponentes(e1, e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDim",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // arrayDim ::= arrayDim1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDim",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // arrayDim1 ::= OPEN_SQR opNum CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mp.getPosition(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDim1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arrayDim1 ::= error 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		mp.printSintaxError("Error de array dimension");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDim1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arrayDimen ::= arrayDimen arrayDimen1 
            {
              LinkedList<Cuarteto> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Cuarteto> e1 = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Cuarteto> e2 = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDimen",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arrayDimen ::= arrayDimen1 
            {
              LinkedList<Cuarteto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Cuarteto> e = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDimen",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arrayDimen1 ::= OPEN_SQR opNum2 CLOSE_SQR 
            {
              LinkedList<Cuarteto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDimen1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$2 ::= 
            {
              LinkedList<Cuarteto> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
mp.printSintaxError("Error de array dimension");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arrayDimen1 ::= error NT$2 CLOSE_SQR 
            {
              LinkedList<Cuarteto> RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (LinkedList<Cuarteto>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayDimen1",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // array ::= ARRAY tipo arrayDimen assignA SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Cuarteto> e2 = (LinkedList<Cuarteto>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assignA ::= assignA COMMA VARIABLE 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assignA ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignA",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arrayAssign ::= arrayPosition ASSIGN exp SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mp.setArrayAsign(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAssign",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arrayPosition ::= VARIABLE arrayDim 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getArrayPosition(e1, e2, e1left, e1right);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayPosition",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // if ::= IF OPEN_BRK if1 CLOSE_BRK ifA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // if ::= IF OPEN_BRK if1 CLOSE_BRK ifB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // if1 ::= opBol 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ifA ::= instruction elseifA elseA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ifA ::= instruction elseifA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ifA ::= instruction elseA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ifA ::= instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifA",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // elseifA ::= elseifA elseifAA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // elseifA ::= elseifAA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // elseifAA ::= ELSIF OPEN_BRK opBol CLOSE_BRK instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifAA",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // elseA ::= ELSE instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ifB ::= block elseifB elseB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ifB ::= block elseifB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ifB ::= block elseB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ifB ::= block 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifB",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // elseifB ::= elseifB elseifBB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // elseifB ::= elseifBB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifB",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // elseifBB ::= ELSIF OPEN_BRK opBol CLOSE_BRK block 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseifBB",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // elseB ::= ELSE block 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseB",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // while ::= WHILE OPEN_BRK opBol CLOSE_BRK whileA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.whileOperacion(e1,e2,e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // whileA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileA",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // whileA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileA",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // doWhile ::= DO doWhileA WHILE OPEN_BRK opBol CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mp.doWhileOperacion(e1,e2,e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhile",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // doWhileA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileA",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // doWhileA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("doWhileA",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for ::= FOR OPEN_BRK assign COLON opBol COLON signo NUM_INTEGER CLOSE_BRK forA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e5 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.forOperacion(e1,e2,e3,e4,e5, e4left, e4right);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // forA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forA",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // forA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forA",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // scans ::= SCANS OPEN_SQR VARIABLE CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scans",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // scans ::= SCANS OPEN_SQR arrayPosition CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scans",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // scann ::= SCANN OPEN_SQR VARIABLE CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scann",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // scann ::= SCANN OPEN_SQR arrayPosition CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scann",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // print ::= PRINT printA SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // println ::= PRINTLN printB SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("println",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // printA ::= OPEN_SQR valueA CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printA",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // printB ::= OPEN_SQR valueB CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printB",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valueA ::= valueA COMMA value 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getPrint(e1,e2,ManejadorParser.PRINT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valueA ::= value 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimplePrint(e,ManejadorParser.PRINT);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueA",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // valueB ::= valueB COMMA value 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getPrint(e1,e2,ManejadorParser.PRINTLN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueB",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // valueB ::= value 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimplePrint(e,ManejadorParser.PRINTLN);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueB",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // value ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // signo ::= PLUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // signo ::= MINUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signo",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // formalAssign ::= assign SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalAssign",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // assign ::= assign1 exp 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.asignByToken(e1,e2, e1left, e1right);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // assign1 ::= VARIABLE ASSIGN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // exp ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // opNum2 ::= ex2 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.orderOpNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opNum2",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ex2 ::= ex2 MULTI ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getMulti(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ex2 ::= ex2 MINUS ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getResta(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ex2 ::= ex2 DIVISION ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getDivision(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ex2 ::= ex2 MODULE ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getModulo(e1,e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ex2 ::= ex2 PLUS ex2 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSumaConcatenacion(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ex2 ::= OPEN_BRK ex2 CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ex2 ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ex2 ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ex2 ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getVariable(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ex2 ::= TEXT 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoString(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ex2 ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoBool(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ex2 ::= subprogramCall 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex2",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // opNum ::= ex 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.orderOpNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opNum",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ex ::= ex MULTI ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getMulti(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ex ::= ex MINUS ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getResta(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ex ::= ex DIVISION ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getDivision(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ex ::= ex MODULE ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getModulo(e1,e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ex ::= ex PLUS ex 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSumaConcatenacion(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ex ::= OPEN_BRK ex CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ex ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ex ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ex ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getVariable(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ex ::= TEXT 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoString(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ex ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoBool(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ex ::= subprogramCall 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ex",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // num ::= NUM_INTEGER 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolEntero(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // num ::= NUM_FLOAT 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolFloat(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // num ::= NUM_DOUBLE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolDouble(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("num",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // opBol ::= b 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opBol",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // b ::= b AND b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getAnd(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // b ::= b OR b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getOr(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // b ::= NOT b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getNot(e1,e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // b ::= OPEN_BRK b CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // b ::= opRel 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // b ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getVariableRel(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // b ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getBool(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // b ::= subprogramCall 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // opRel ::= r 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opRel",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // r ::= expRel rel expRel 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getRelacion(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // rel ::= HIGHER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // rel ::= LOWER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // rel ::= HIGHER_EQ 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // rel ::= LOWER_EQ 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // rel ::= NOT_EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // rel ::= EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expRel ::= er 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.orderOpNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expRel",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // er ::= er MULTI er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getMulti(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // er ::= er MINUS er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getResta(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // er ::= er DIVISION er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getDivision(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // er ::= er MODULE er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getModulo(e1,e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // er ::= er PLUS er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSumaConcatenacion(e1, e2, e3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",68, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // er ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getCuartetoNum(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // er ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // er ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getVariable(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // er ::= subprogramCall 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("er",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // bool ::= TRUE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolBoolean(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // bool ::= FALSE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getSimbolBoolean(e, eleft, eright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // tipo ::= BYTE 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // tipo ::= LONG 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // tipo ::= DOUBLE 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tipo ::= VOID 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
