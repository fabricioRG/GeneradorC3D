
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo3d.backend.analizadores;

import java_cup.runtime.*;
import codigo3d.backend.manejadores.*;
import codigo3d.backend.objetos.*;
import java.awt.Color;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\316\000\002\002\004\000\002\012\005\000\002\012" +
    "\004\000\002\012\003\000\002\115\002\000\002\011\007" +
    "\000\002\116\002\000\002\011\005\000\002\005\005\000" +
    "\002\005\004\000\002\013\004\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\117\002\000\002\105" +
    "\007\000\002\006\004\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\120\002\000\002\010\005" +
    "\000\002\112\004\000\002\113\004\000\002\113\005\000" +
    "\002\114\005\000\002\114\003\000\002\121\002\000\002" +
    "\114\005\000\002\111\005\000\002\107\004\000\002\107" +
    "\005\000\002\122\002\000\002\107\005\000\002\106\005" +
    "\000\002\106\003\000\002\110\004\000\002\123\002\000" +
    "\002\110\005\000\002\015\007\000\002\015\005\000\002" +
    "\015\005\000\002\015\004\000\002\124\002\000\002\015" +
    "\005\000\002\026\004\000\002\026\003\000\002\027\003" +
    "\000\002\027\003\000\002\004\004\000\002\004\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\125\002\000\002\002\005\000\002\003\005\000\002\025" +
    "\005\000\002\025\003\000\002\024\003\000\002\024\003" +
    "\000\002\021\004\000\002\126\002\000\002\021\005\000" +
    "\002\022\004\000\002\127\002\000\002\022\005\000\002" +
    "\035\004\000\002\035\003\000\002\034\005\000\002\130" +
    "\002\000\002\034\005\000\002\032\007\000\002\033\005" +
    "\000\002\033\003\000\002\131\002\000\002\033\005\000" +
    "\002\030\006\000\002\031\004\000\002\132\002\000\002" +
    "\031\005\000\002\036\007\000\002\036\007\000\002\037" +
    "\003\000\002\040\005\000\002\040\004\000\002\040\004" +
    "\000\002\040\003\000\002\041\004\000\002\041\003\000" +
    "\002\042\007\000\002\043\004\000\002\044\005\000\002" +
    "\044\004\000\002\044\004\000\002\044\003\000\002\045" +
    "\004\000\002\045\003\000\002\046\007\000\002\047\004" +
    "\000\002\050\007\000\002\051\003\000\002\051\003\000" +
    "\002\055\010\000\002\056\003\000\002\056\003\000\002" +
    "\053\014\000\002\054\003\000\002\054\003\000\002\103" +
    "\007\000\002\103\007\000\002\104\007\000\002\104\007" +
    "\000\002\057\005\000\002\060\005\000\002\061\005\000" +
    "\002\062\005\000\002\064\005\000\002\064\003\000\002" +
    "\065\005\000\002\065\003\000\002\063\003\000\002\052" +
    "\003\000\002\052\003\000\002\023\004\000\002\020\004" +
    "\000\002\017\004\000\002\072\003\000\002\073\003\000" +
    "\002\074\005\000\002\074\005\000\002\074\005\000\002" +
    "\074\005\000\002\074\005\000\002\074\005\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\075\003\000\002" +
    "\076\005\000\002\076\005\000\002\076\004\000\002\076" +
    "\005\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\077\003\000\002\100\005\000" +
    "\002\100\003\000\002\066\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\101\003\000\002\102\005\000\002\102\005" +
    "\000\002\102\005\000\002\102\005\000\002\102\005\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\071\003\000\002\071\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0150\000\036\003\026\004\020\005\012\006\013\007" +
    "\010\010\005\011\022\012\036\013\021\021\034\061\015" +
    "\064\025\066\016\067\033\001\002\000\034\003\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\021\uffc3\061\uffc3\066\uffc3\067\uffc3\001\002\000" +
    "\010\003\uff38\036\uff38\061\uff38\001\002\000\034\003\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\021\ufff4\061\ufff4\066\ufff4\067\ufff4\001\002" +
    "\000\006\003\322\061\u011c\001\002\000\010\003\uff39\036" +
    "\uff39\061\uff39\001\002\000\034\003\uffc4\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\021" +
    "\uffc4\061\uffc4\066\uffc4\067\uffc4\001\002\000\010\003\uff3b" +
    "\036\uff3b\061\uff3b\001\002\000\010\003\uff3a\036\uff3a\061" +
    "\uff3a\001\002\000\034\003\uffc1\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\021\uffc1\061" +
    "\uffc1\066\uffc1\067\uffc1\001\002\000\010\003\100\036\101" +
    "\041\u0106\001\002\000\006\003\140\064\025\001\002\000" +
    "\004\002\u011a\001\002\000\010\003\uff3c\036\uff3c\061\uff3c" +
    "\001\002\000\010\003\uff35\036\uff35\061\uff35\001\002\000" +
    "\010\003\uff37\036\uff37\061\uff37\001\002\000\004\002\ufffe" +
    "\001\002\000\034\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\021\ufff5\061\ufff5" +
    "\066\ufff5\067\ufff5\001\002\000\004\034\146\001\002\000" +
    "\006\035\ufffb\037\uff9b\001\002\000\004\040\145\001\002" +
    "\000\024\003\056\017\044\020\054\034\050\055\060\056" +
    "\057\057\046\060\047\061\052\001\002\000\034\003\056" +
    "\004\020\005\012\006\013\007\010\010\005\011\022\012" +
    "\036\013\021\021\034\061\015\066\136\067\033\001\002" +
    "\000\034\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\021\ufff6\061\ufff6\066\ufff6" +
    "\067\ufff6\001\002\000\010\003\uff34\036\uff34\061\uff34\001" +
    "\002\000\024\004\020\005\012\006\013\007\010\010\005" +
    "\011\022\012\036\013\021\067\033\001\002\000\034\003" +
    "\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\021\uffc2\061\uffc2\066\uffc2\067\uffc2\001" +
    "\002\000\010\003\uff36\036\uff36\061\uff36\001\002\000\004" +
    "\041\040\001\002\000\024\003\056\017\044\020\054\034" +
    "\050\055\060\056\057\057\046\060\047\061\052\001\002" +
    "\000\026\032\uff5e\033\uff5e\035\uff5e\037\uff5e\040\uff5e\042" +
    "\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e\001\002\000\026" +
    "\032\uff5f\033\uff5f\035\uff5f\037\uff5f\040\uff5f\042\uff5f\043" +
    "\uff5f\044\uff5f\045\uff5f\046\uff5f\001\002\000\026\032\uff62" +
    "\033\uff62\035\uff62\037\uff62\040\uff62\042\uff62\043\uff62\044" +
    "\uff62\045\uff62\046\uff62\001\002\000\032\015\uff3e\016\uff3e" +
    "\032\uff3e\033\uff3e\035\uff3e\037\uff3e\040\uff3e\042\uff3e\043" +
    "\uff3e\044\uff3e\045\uff3e\046\uff3e\001\002\000\004\040\123" +
    "\001\002\000\046\015\uff5b\016\uff5b\032\uff5b\033\uff5b\035" +
    "\uff5b\037\uff5b\040\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b" +
    "\046\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054" +
    "\uff5b\001\002\000\046\015\uff5c\016\uff5c\032\uff5c\033\uff5c" +
    "\035\uff5c\037\uff5c\040\uff5c\042\uff5c\043\uff5c\044\uff5c\045" +
    "\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053\uff5c" +
    "\054\uff5c\001\002\000\024\003\056\017\044\020\054\034" +
    "\050\055\060\056\057\057\046\060\047\061\052\001\002" +
    "\000\026\032\uff63\033\uff63\035\uff63\037\uff63\040\uff63\042" +
    "\uff63\043\uff63\044\uff63\045\uff63\046\uff63\001\002\000\034" +
    "\003\100\032\uff61\033\uff61\034\102\035\uff61\036\101\037" +
    "\uff61\040\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61" +
    "\001\002\000\026\032\uff6a\033\uff6a\035\uff6a\037\uff6a\040" +
    "\uff6a\042\064\043\066\044\067\045\065\046\063\001\002" +
    "\000\032\015\uff3d\016\uff3d\032\uff3d\033\uff3d\035\uff3d\037" +
    "\uff3d\040\uff3d\042\uff3d\043\uff3d\044\uff3d\045\uff3d\046\uff3d" +
    "\001\002\000\010\032\uff6b\033\uff6b\040\uff6b\001\002\000" +
    "\004\037\uff9b\001\002\000\046\015\uff5d\016\uff5d\032\uff5d" +
    "\033\uff5d\035\uff5d\037\uff5d\040\uff5d\042\uff5d\043\uff5d\044" +
    "\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d" +
    "\053\uff5d\054\uff5d\001\002\000\026\032\uff60\033\uff60\035" +
    "\uff60\037\uff60\040\uff60\042\uff60\043\uff60\044\uff60\045\uff60" +
    "\046\uff60\001\002\000\004\037\062\001\002\000\050\015" +
    "\uff9a\016\uff9a\032\uff9a\033\uff9a\035\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\001\002" +
    "\000\024\003\056\017\044\020\054\034\050\055\060\056" +
    "\057\057\046\060\047\061\052\001\002\000\024\003\056" +
    "\017\044\020\054\034\050\055\060\056\057\057\046\060" +
    "\047\061\052\001\002\000\024\003\056\017\044\020\054" +
    "\034\050\055\060\056\057\057\046\060\047\061\052\001" +
    "\002\000\024\003\056\017\044\020\054\034\050\055\060" +
    "\056\057\057\046\060\047\061\052\001\002\000\024\003" +
    "\056\017\044\020\054\034\050\055\060\056\057\057\046" +
    "\060\047\061\052\001\002\000\026\032\uff69\033\uff69\035" +
    "\uff69\037\uff69\040\uff69\042\uff69\043\uff69\044\uff69\045\uff69" +
    "\046\uff69\001\002\000\026\032\uff68\033\uff68\035\uff68\037" +
    "\uff68\040\uff68\042\uff68\043\uff68\044\067\045\065\046\063" +
    "\001\002\000\026\032\uff67\033\uff67\035\uff67\037\uff67\040" +
    "\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67\001\002" +
    "\000\026\032\uff65\033\uff65\035\uff65\037\uff65\040\uff65\042" +
    "\uff65\043\066\044\067\045\065\046\063\001\002\000\026" +
    "\032\uff66\033\uff66\035\uff66\037\uff66\040\uff66\042\uff66\043" +
    "\uff66\044\uff66\045\uff66\046\uff66\001\002\000\046\015\uffe1" +
    "\016\uffe1\032\uffe1\033\uffe1\035\uffe1\037\uffe1\040\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\001\002\000\054\003" +
    "\100\015\uff9c\016\uff9c\032\uff9c\033\uff9c\035\uff9c\036\101" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\001\002\000\056\003\uffa6\015\uffa6\016\uffa6\032" +
    "\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\061\uffa6\001\002" +
    "\000\004\037\uffa4\001\002\000\024\003\056\017\044\020" +
    "\054\034\050\055\060\056\057\057\046\060\047\061\052" +
    "\001\002\000\026\003\106\017\044\020\054\034\050\035" +
    "\104\055\060\056\057\057\046\060\047\061\052\001\002" +
    "\000\006\032\111\035\112\001\002\000\046\015\uffe0\016" +
    "\uffe0\032\uffe0\033\uffe0\035\uffe0\037\uffe0\040\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\054\uffe0\001\002\000\006\032\uffdd" +
    "\035\uffdd\001\002\000\026\003\uffdc\017\uffdc\020\uffdc\034" +
    "\uffdc\037\uff9b\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\001\002\000\024\003\056\017\044\020\054\034\050\055" +
    "\060\056\057\057\046\060\047\061\052\001\002\000\006" +
    "\032\uffdb\035\uffdb\001\002\000\024\003\056\017\044\020" +
    "\054\034\050\055\060\056\057\057\046\060\047\061\052" +
    "\001\002\000\046\015\uffdf\016\uffdf\032\uffdf\033\uffdf\035" +
    "\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf" +
    "\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\001\002\000\006\032\uffde\035\uffde\001\002\000\004" +
    "\037\115\001\002\000\056\003\uffa5\015\uffa5\016\uffa5\032" +
    "\uffa5\033\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\061\uffa5\001\002" +
    "\000\004\037\117\001\002\000\056\003\uffa3\015\uffa3\016" +
    "\uffa3\032\uffa3\033\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\061\uffa3" +
    "\001\002\000\056\003\uffa7\015\uffa7\016\uffa7\032\uffa7\033" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\061\uffa7\001\002\000\016" +
    "\035\122\042\064\043\066\044\067\045\065\046\063\001" +
    "\002\000\026\032\uff64\033\uff64\035\uff64\037\uff64\040\uff64" +
    "\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64\001\002\000" +
    "\064\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\037\uff9d" +
    "\061\uff9d\062\uff9d\063\uff9d\065\uff9d\066\uff9d\067\uff9d\001" +
    "\002\000\006\003\100\036\101\001\002\000\010\003\126" +
    "\036\101\061\130\001\002\000\006\037\uffa4\061\uff9f\001" +
    "\002\000\006\032\131\040\132\001\002\000\006\032\uffa0" +
    "\040\uffa0\001\002\000\004\061\133\001\002\000\064\003" +
    "\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025" +
    "\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\037\uffa2\061\uffa2" +
    "\062\uffa2\063\uffa2\065\uffa2\066\uffa2\067\uffa2\001\002\000" +
    "\006\032\uffa1\040\uffa1\001\002\000\004\061\135\001\002" +
    "\000\006\032\uff9e\040\uff9e\001\002\000\006\003\140\064" +
    "\025\001\002\000\034\003\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\021\ufff7\061" +
    "\ufff7\066\ufff7\067\ufff7\001\002\000\004\035\ufffb\001\002" +
    "\000\004\002\000\001\002\000\004\035\143\001\002\000" +
    "\004\002\ufffa\001\002\000\006\033\uff6d\040\uff6d\001\002" +
    "\000\064\003\uff6e\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010" +
    "\uff6e\011\uff6e\012\uff6e\013\uff6e\021\uff6e\022\uff6e\023\uff6e" +
    "\024\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\037" +
    "\uff6e\061\uff6e\062\uff6e\063\uff6e\065\uff6e\066\uff6e\067\uff6e" +
    "\001\002\000\004\035\147\001\002\000\004\036\ufffd\001" +
    "\002\000\004\036\151\001\002\000\054\003\160\004\020" +
    "\005\012\006\013\007\010\010\005\011\022\012\036\013" +
    "\021\021\034\022\157\025\171\026\202\027\155\030\201" +
    "\031\154\037\165\061\015\062\177\063\203\067\033\001" +
    "\002\000\004\002\ufffc\001\002\000\062\003\uffbd\004\uffbd" +
    "\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\037\uffbd\061\uffbd\062\uffbd\063" +
    "\uffbd\065\uffbd\067\uffbd\001\002\000\004\036\u0112\001\002" +
    "\000\004\034\u0103\001\002\000\054\003\uffc5\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\021\uffc5\022\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\037\uffc5\061\uffc5\062\uffc5\063\uffc5\067\uffc5\001\002" +
    "\000\004\034\343\001\002\000\006\037\uff9b\040\uffb4\001" +
    "\002\000\054\003\160\004\020\005\012\006\013\007\010" +
    "\010\005\011\022\012\036\013\021\021\034\022\157\025" +
    "\171\026\202\027\155\030\201\031\154\037\340\061\015" +
    "\062\177\063\203\067\033\001\002\000\062\003\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\037\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\065\uffbb\067\uffbb\001\002\000\062\003\uffbc\004" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\013\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\037\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\065\uffbc\067\uffbc\001\002\000\062\003\uffb7\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\037\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\065\uffb7\067\uffb7\001\002\000\064\002\ufff8\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\037\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\065\ufff8\067\ufff8\001\002\000\006\003" +
    "\322\061\325\001\002\000\062\003\uffbf\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\037\uffbf\061\uffbf\062\uffbf\063\uffbf\065" +
    "\uffbf\067\uffbf\001\002\000\062\003\uffba\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\037\uffba\061\uffba\062\uffba\063\uffba\065" +
    "\uffba\067\uffba\001\002\000\004\034\312\001\002\000\062" +
    "\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\037\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\065\uffb6\067\uffb6\001\002\000\062" +
    "\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\037\uffbe\061" +
    "\uffbe\062\uffbe\063\uffbe\065\uffbe\067\uffbe\001\002\000\062" +
    "\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\037\uffb8\061" +
    "\uffb8\062\uffb8\063\uffb8\065\uffb8\067\uffb8\001\002\000\062" +
    "\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\013\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\037\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\065\uffb5\067\uffb5\001\002\000\062" +
    "\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\037\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\065\uffc0\067\uffc0\001\002\000\004" +
    "\036\303\001\002\000\062\003\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\037\uffb9\061\uffb9\062\uffb9\063\uffb9\065\uffb9" +
    "\067\uffb9\001\002\000\004\036\272\001\002\000\054\003" +
    "\160\004\020\005\012\006\013\007\010\010\005\011\022" +
    "\012\036\013\021\021\034\022\157\025\171\026\202\027" +
    "\155\030\201\031\154\036\151\061\015\062\177\063\203" +
    "\067\033\001\002\000\004\036\204\001\002\000\006\003" +
    "\056\061\206\001\002\000\004\037\211\001\002\000\010" +
    "\003\100\036\101\037\207\001\002\000\004\040\210\001" +
    "\002\000\062\003\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b" +
    "\010\uff7b\011\uff7b\012\uff7b\013\uff7b\021\uff7b\022\uff7b\023" +
    "\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b" +
    "\037\uff7b\061\uff7b\062\uff7b\063\uff7b\065\uff7b\067\uff7b\001" +
    "\002\000\004\040\212\001\002\000\062\003\uff7a\004\uff7a" +
    "\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013" +
    "\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a" +
    "\027\uff7a\030\uff7a\031\uff7a\037\uff7a\061\uff7a\062\uff7a\063" +
    "\uff7a\065\uff7a\067\uff7a\001\002\000\004\025\uff81\001\002" +
    "\000\004\025\uff82\001\002\000\004\025\216\001\002\000" +
    "\004\034\217\001\002\000\024\003\232\014\221\017\044" +
    "\020\054\034\231\056\057\057\046\060\047\061\222\001" +
    "\002\000\004\035\271\001\002\000\024\003\232\014\221" +
    "\017\044\020\054\034\231\056\057\057\046\060\047\061" +
    "\222\001\002\000\046\003\100\015\uff54\016\uff54\033\uff54" +
    "\034\102\035\uff54\036\101\042\uff40\043\uff40\044\uff40\045" +
    "\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40" +
    "\054\uff40\001\002\000\040\015\uff42\016\uff42\033\uff42\035" +
    "\uff42\042\uff42\043\uff42\044\uff42\045\uff42\046\uff42\047\uff42" +
    "\050\uff42\051\uff42\052\uff42\053\uff42\054\uff42\001\002\000" +
    "\012\015\uff53\016\uff53\033\uff53\035\uff53\001\002\000\016" +
    "\047\266\050\264\051\262\052\265\053\261\054\263\001" +
    "\002\000\012\015\uff51\016\uff51\033\uff51\035\uff51\001\002" +
    "\000\012\015\uff55\016\uff55\033\uff55\035\uff55\001\002\000" +
    "\040\015\uff52\016\uff52\033\uff52\035\uff52\042\uff3f\043\uff3f" +
    "\044\uff3f\045\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052" +
    "\uff3f\053\uff3f\054\uff3f\001\002\000\024\003\232\014\221" +
    "\017\044\020\054\034\231\056\057\057\046\060\047\061" +
    "\222\001\002\000\014\015\uff4f\016\uff4f\033\uff4f\035\uff4f" +
    "\037\uff9b\001\002\000\012\015\252\016\253\033\uff5a\035" +
    "\uff5a\001\002\000\040\015\uff48\016\uff48\033\uff48\035\uff48" +
    "\042\237\043\240\044\242\045\241\046\236\047\uff48\050" +
    "\uff48\051\uff48\052\uff48\053\uff48\054\uff48\001\002\000\040" +
    "\015\uff41\016\uff41\033\uff41\035\uff41\042\uff41\043\uff41\044" +
    "\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41\052\uff41" +
    "\053\uff41\054\uff41\001\002\000\014\003\056\056\057\057" +
    "\046\060\047\061\244\001\002\000\014\003\056\056\057" +
    "\057\046\060\047\061\244\001\002\000\014\003\056\056" +
    "\057\057\046\060\047\061\244\001\002\000\014\003\056" +
    "\056\057\057\046\060\047\061\244\001\002\000\014\003" +
    "\056\056\057\057\046\060\047\061\244\001\002\000\040" +
    "\015\uff3f\016\uff3f\033\uff3f\035\uff3f\042\uff3f\043\uff3f\044" +
    "\uff3f\045\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f" +
    "\053\uff3f\054\uff3f\001\002\000\046\003\100\015\uff40\016" +
    "\uff40\033\uff40\034\102\035\uff40\036\101\042\uff40\043\uff40" +
    "\044\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052" +
    "\uff40\053\uff40\054\uff40\001\002\000\040\015\uff47\016\uff47" +
    "\033\uff47\035\uff47\042\uff47\043\uff47\044\uff47\045\uff47\046" +
    "\uff47\047\uff47\050\uff47\051\uff47\052\uff47\053\uff47\054\uff47" +
    "\001\002\000\040\015\uff45\016\uff45\033\uff45\035\uff45\042" +
    "\uff45\043\uff45\044\uff45\045\uff45\046\uff45\047\uff45\050\uff45" +
    "\051\uff45\052\uff45\053\uff45\054\uff45\001\002\000\040\015" +
    "\uff46\016\uff46\033\uff46\035\uff46\042\uff46\043\uff46\044\242" +
    "\045\241\046\236\047\uff46\050\uff46\051\uff46\052\uff46\053" +
    "\uff46\054\uff46\001\002\000\040\015\uff43\016\uff43\033\uff43" +
    "\035\uff43\042\uff43\043\240\044\242\045\241\046\236\047" +
    "\uff43\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43\001\002" +
    "\000\040\015\uff44\016\uff44\033\uff44\035\uff44\042\uff44\043" +
    "\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44" +
    "\052\uff44\053\uff44\054\uff44\001\002\000\024\003\232\014" +
    "\221\017\044\020\054\034\231\056\057\057\046\060\047" +
    "\061\222\001\002\000\024\003\232\014\221\017\044\020" +
    "\054\034\231\056\057\057\046\060\047\061\222\001\002" +
    "\000\012\015\252\016\uff58\033\uff58\035\uff58\001\002\000" +
    "\012\015\uff59\016\uff59\033\uff59\035\uff59\001\002\000\010" +
    "\015\252\016\253\035\257\001\002\000\012\015\uff56\016" +
    "\uff56\033\uff56\035\uff56\001\002\000\014\003\056\056\057" +
    "\057\046\060\047\061\244\001\002\000\014\003\uff4a\056" +
    "\uff4a\057\uff4a\060\uff4a\061\uff4a\001\002\000\014\003\uff4d" +
    "\056\uff4d\057\uff4d\060\uff4d\061\uff4d\001\002\000\014\003" +
    "\uff49\056\uff49\057\uff49\060\uff49\061\uff49\001\002\000\014" +
    "\003\uff4c\056\uff4c\057\uff4c\060\uff4c\061\uff4c\001\002\000" +
    "\014\003\uff4e\056\uff4e\057\uff4e\060\uff4e\061\uff4e\001\002" +
    "\000\014\003\uff4b\056\uff4b\057\uff4b\060\uff4b\061\uff4b\001" +
    "\002\000\012\015\uff50\016\uff50\033\uff50\035\uff50\001\002" +
    "\000\012\015\uff57\016\uff57\033\uff57\035\uff57\001\002\000" +
    "\062\003\uff83\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83" +
    "\011\uff83\012\uff83\013\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\uff83\031\uff83\037\uff83" +
    "\061\uff83\062\uff83\063\uff83\065\uff83\067\uff83\001\002\000" +
    "\024\003\056\017\044\020\054\034\050\055\060\056\057" +
    "\057\046\060\047\061\052\001\002\000\004\040\274\001" +
    "\002\000\062\003\uff79\004\uff79\005\uff79\006\uff79\007\uff79" +
    "\010\uff79\011\uff79\012\uff79\013\uff79\021\uff79\022\uff79\023" +
    "\uff79\024\uff79\025\uff79\026\uff79\027\uff79\030\uff79\031\uff79" +
    "\037\uff79\061\uff79\062\uff79\063\uff79\065\uff79\067\uff79\001" +
    "\002\000\006\032\300\037\301\001\002\000\006\032\uff71" +
    "\037\uff71\001\002\000\006\032\uff74\037\uff74\001\002\000" +
    "\024\003\056\017\044\020\054\034\050\055\060\056\057" +
    "\057\046\060\047\061\052\001\002\000\004\040\uff77\001" +
    "\002\000\006\032\uff75\037\uff75\001\002\000\006\003\056" +
    "\061\305\001\002\000\004\037\310\001\002\000\010\003" +
    "\100\036\101\037\306\001\002\000\004\040\307\001\002" +
    "\000\062\003\uff7d\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\021\uff7d\022\uff7d\023\uff7d" +
    "\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\037" +
    "\uff7d\061\uff7d\062\uff7d\063\uff7d\065\uff7d\067\uff7d\001\002" +
    "\000\004\040\311\001\002\000\062\003\uff7c\004\uff7c\005" +
    "\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027" +
    "\uff7c\030\uff7c\031\uff7c\037\uff7c\061\uff7c\062\uff7c\063\uff7c" +
    "\065\uff7c\067\uff7c\001\002\000\024\003\232\014\221\017" +
    "\044\020\054\034\231\056\057\057\046\060\047\061\222" +
    "\001\002\000\004\035\314\001\002\000\054\003\160\004" +
    "\020\005\012\006\013\007\010\010\005\011\022\012\036" +
    "\013\021\021\034\022\157\025\171\026\202\027\155\030" +
    "\201\031\154\036\151\061\015\062\177\063\203\067\033" +
    "\001\002\000\062\003\uff84\004\uff84\005\uff84\006\uff84\007" +
    "\uff84\010\uff84\011\uff84\012\uff84\013\uff84\021\uff84\022\uff84" +
    "\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84\030\uff84\031" +
    "\uff84\037\uff84\061\uff84\062\uff84\063\uff84\065\uff84\067\uff84" +
    "\001\002\000\062\003\uff85\004\uff85\005\uff85\006\uff85\007" +
    "\uff85\010\uff85\011\uff85\012\uff85\013\uff85\021\uff85\022\uff85" +
    "\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031" +
    "\uff85\037\uff85\061\uff85\062\uff85\063\uff85\065\uff85\067\uff85" +
    "\001\002\000\062\003\uff86\004\uff86\005\uff86\006\uff86\007" +
    "\uff86\010\uff86\011\uff86\012\uff86\013\uff86\021\uff86\022\uff86" +
    "\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031" +
    "\uff86\037\uff86\061\uff86\062\uff86\063\uff86\065\uff86\067\uff86" +
    "\001\002\000\006\032\uffb0\040\uffb0\001\002\000\006\032" +
    "\334\040\335\001\002\000\026\003\uffac\017\uffac\020\uffac" +
    "\034\uffac\041\uffa9\055\uffac\056\uffac\057\uffac\060\uffac\061" +
    "\uffac\001\002\000\024\003\056\017\044\020\054\034\050" +
    "\055\060\056\057\057\046\060\047\061\052\001\002\000" +
    "\006\032\uffaf\040\uffaf\001\002\000\010\032\uffae\040\uffae" +
    "\041\326\001\002\000\024\003\uffaa\017\uffaa\020\uffaa\034" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\001\002" +
    "\000\006\032\uffad\040\uffad\001\002\000\004\041\333\001" +
    "\002\000\024\003\056\017\044\020\054\034\050\055\060" +
    "\056\057\057\046\060\047\061\052\001\002\000\006\032" +
    "\uffab\040\uffab\001\002\000\024\003\uffa8\017\uffa8\020\uffa8" +
    "\034\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\001" +
    "\002\000\006\003\322\061\325\001\002\000\064\003\uffb2" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\037\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\065\uffb2\066\uffb2\067\uffb2\001\002\000\006" +
    "\032\uffb1\040\uffb1\001\002\000\054\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\021\uffc6\022\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\037\uffc6\061\uffc6\062\uffc6\063\uffc6\067\uffc6\001\002" +
    "\000\064\002\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031" +
    "\ufff9\037\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\067\ufff9" +
    "\001\002\000\004\040\342\001\002\000\062\003\uffb3\004" +
    "\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\037\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\065\uffb3\067\uffb3\001\002\000\024\003\232\014" +
    "\221\017\044\020\054\034\231\056\057\057\046\060\047" +
    "\061\222\001\002\000\004\035\uff97\001\002\000\004\035" +
    "\346\001\002\000\054\003\160\004\020\005\012\006\013" +
    "\007\010\010\005\011\022\012\036\013\021\021\034\022" +
    "\157\025\171\026\202\027\155\030\201\031\154\036\151" +
    "\061\015\062\177\063\203\067\033\001\002\000\062\003" +
    "\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\011\uff8b" +
    "\012\uff8b\013\uff8b\021\uff8b\022\uff8b\023\372\024\370\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\037\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\065\uff8b\067\uff8b\001\002\000\062\003" +
    "\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\021\uff93\022\uff93\023\356\024\354\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\037\uff93\061\uff93" +
    "\062\uff93\063\uff93\065\uff93\067\uff93\001\002\000\062\003" +
    "\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\013\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025" +
    "\uff98\026\uff98\027\uff98\030\uff98\031\uff98\037\uff98\061\uff98" +
    "\062\uff98\063\uff98\065\uff98\067\uff98\001\002\000\062\003" +
    "\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\013\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\037\uff99\061\uff99" +
    "\062\uff99\063\uff99\065\uff99\067\uff99\001\002\000\062\003" +
    "\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94" +
    "\012\uff94\013\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\030\uff94\031\uff94\037\uff94\061\uff94" +
    "\062\uff94\063\uff94\065\uff94\067\uff94\001\002\000\052\003" +
    "\160\004\020\005\012\006\013\007\010\010\005\011\022" +
    "\012\036\013\021\021\034\022\157\025\171\026\202\027" +
    "\155\030\201\031\154\061\015\062\177\063\203\067\033" +
    "\001\002\000\062\003\uff91\004\uff91\005\uff91\006\uff91\007" +
    "\uff91\010\uff91\011\uff91\012\uff91\013\uff91\021\uff91\022\uff91" +
    "\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031" +
    "\uff91\037\uff91\061\uff91\062\uff91\063\uff91\065\uff91\067\uff91" +
    "\001\002\000\004\034\362\001\002\000\062\003\uff95\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\021\uff95\022\uff95\023\356\024\354\025\uff95\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\037\uff95\061\uff95\062\uff95" +
    "\063\uff95\065\uff95\067\uff95\001\002\000\062\003\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\037\uff96\061\uff96\062\uff96" +
    "\063\uff96\065\uff96\067\uff96\001\002\000\062\003\uff92\004" +
    "\uff92\005\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92" +
    "\013\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\037\uff92\061\uff92\062\uff92" +
    "\063\uff92\065\uff92\067\uff92\001\002\000\024\003\232\014" +
    "\221\017\044\020\054\034\231\056\057\057\046\060\047" +
    "\061\222\001\002\000\004\035\364\001\002\000\052\003" +
    "\160\004\020\005\012\006\013\007\010\010\005\011\022" +
    "\012\036\013\021\021\034\022\157\025\171\026\202\027" +
    "\155\030\201\031\154\061\015\062\177\063\203\067\033" +
    "\001\002\000\062\003\uff90\004\uff90\005\uff90\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\013\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\037\uff90\061\uff90\062\uff90\063\uff90\065\uff90\067\uff90" +
    "\001\002\000\062\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\037\uff8f\061\uff8f\062\uff8f\063\uff8f\065\uff8f\067\uff8f" +
    "\001\002\000\062\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\021\uff8c\022\uff8c" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\037\uff8c\061\uff8c\062\uff8c\063\uff8c\065\uff8c\067\uff8c" +
    "\001\002\000\004\036\151\001\002\000\062\003\uff89\004" +
    "\uff89\005\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012\uff89" +
    "\013\uff89\021\uff89\022\uff89\023\uff89\024\uff89\025\uff89\026" +
    "\uff89\027\uff89\030\uff89\031\uff89\037\uff89\061\uff89\062\uff89" +
    "\063\uff89\065\uff89\067\uff89\001\002\000\004\034\376\001" +
    "\002\000\062\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\021\uff8d\022\uff8d\023" +
    "\372\024\370\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\037\uff8d\061\uff8d\062\uff8d\063\uff8d\065\uff8d\067\uff8d\001" +
    "\002\000\062\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\011\uff8e\012\uff8e\013\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e" +
    "\037\uff8e\061\uff8e\062\uff8e\063\uff8e\065\uff8e\067\uff8e\001" +
    "\002\000\062\003\uff8a\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\021\uff8a\022\uff8a\023" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a" +
    "\037\uff8a\061\uff8a\062\uff8a\063\uff8a\065\uff8a\067\uff8a\001" +
    "\002\000\024\003\232\014\221\017\044\020\054\034\231" +
    "\056\057\057\046\060\047\061\222\001\002\000\004\035" +
    "\u0100\001\002\000\004\036\151\001\002\000\062\003\uff88" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88" +
    "\026\uff88\027\uff88\030\uff88\031\uff88\037\uff88\061\uff88\062" +
    "\uff88\063\uff88\065\uff88\067\uff88\001\002\000\062\003\uff87" +
    "\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\013\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\037\uff87\061\uff87\062" +
    "\uff87\063\uff87\065\uff87\067\uff87\001\002\000\004\061\u0105" +
    "\001\002\000\004\033\u0107\001\002\000\004\041\u0106\001" +
    "\002\000\024\003\uff6c\017\uff6c\020\uff6c\034\uff6c\055\uff6c" +
    "\056\uff6c\057\uff6c\060\uff6c\061\uff6c\001\002\000\024\003" +
    "\232\014\221\017\044\020\054\034\231\056\057\057\046" +
    "\060\047\061\222\001\002\000\004\033\u0109\001\002\000" +
    "\006\042\u010a\043\u010c\001\002\000\004\056\uff70\001\002" +
    "\000\004\056\u010d\001\002\000\004\056\uff6f\001\002\000" +
    "\004\035\u010e\001\002\000\054\003\160\004\020\005\012" +
    "\006\013\007\010\010\005\011\022\012\036\013\021\021" +
    "\034\022\157\025\171\026\202\027\155\030\201\031\154" +
    "\036\151\061\015\062\177\063\203\067\033\001\002\000" +
    "\062\003\uff80\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80" +
    "\011\uff80\012\uff80\013\uff80\021\uff80\022\uff80\023\uff80\024" +
    "\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\037\uff80" +
    "\061\uff80\062\uff80\063\uff80\065\uff80\067\uff80\001\002\000" +
    "\062\003\uff7e\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010\uff7e" +
    "\011\uff7e\012\uff7e\013\uff7e\021\uff7e\022\uff7e\023\uff7e\024" +
    "\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\037\uff7e" +
    "\061\uff7e\062\uff7e\063\uff7e\065\uff7e\067\uff7e\001\002\000" +
    "\062\003\uff7f\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f" +
    "\011\uff7f\012\uff7f\013\uff7f\021\uff7f\022\uff7f\023\uff7f\024" +
    "\uff7f\025\uff7f\026\uff7f\027\uff7f\030\uff7f\031\uff7f\037\uff7f" +
    "\061\uff7f\062\uff7f\063\uff7f\065\uff7f\067\uff7f\001\002\000" +
    "\024\003\056\017\044\020\054\034\050\055\060\056\057" +
    "\057\046\060\047\061\052\001\002\000\004\040\u0114\001" +
    "\002\000\062\003\uff78\004\uff78\005\uff78\006\uff78\007\uff78" +
    "\010\uff78\011\uff78\012\uff78\013\uff78\021\uff78\022\uff78\023" +
    "\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031\uff78" +
    "\037\uff78\061\uff78\062\uff78\063\uff78\065\uff78\067\uff78\001" +
    "\002\000\006\032\uff72\037\uff72\001\002\000\006\032\u0117" +
    "\037\u0118\001\002\000\024\003\056\017\044\020\054\034" +
    "\050\055\060\056\057\057\046\060\047\061\052\001\002" +
    "\000\004\040\uff76\001\002\000\006\032\uff73\037\uff73\001" +
    "\002\000\004\002\001\001\002\000\004\002\uffff\001\002" +
    "\000\014\003\ufff3\032\uffae\034\ufff3\040\uffae\041\326\001" +
    "\002\000\006\003\u011e\034\u0120\001\002\000\004\035\uffd7" +
    "\001\002\000\006\003\u012c\036\u012d\001\002\000\030\003" +
    "\u0123\004\020\005\012\006\013\007\010\010\005\011\022" +
    "\012\036\013\021\035\u0122\067\033\001\002\000\006\032" +
    "\uffd4\035\uffd4\001\002\000\006\003\uffd9\036\uffd9\001\002" +
    "\000\004\061\uffd2\001\002\000\004\061\u0129\001\002\000" +
    "\006\032\u0126\035\u0127\001\002\000\026\003\u0123\004\020" +
    "\005\012\006\013\007\010\010\005\011\022\012\036\013" +
    "\021\067\033\001\002\000\006\003\uffd8\036\uffd8\001\002" +
    "\000\006\032\uffd5\035\uffd5\001\002\000\006\032\uffd3\035" +
    "\uffd3\001\002\000\004\061\u012b\001\002\000\006\032\uffd1" +
    "\035\uffd1\001\002\000\004\037\uffcc\001\002\000\056\003" +
    "\u0132\004\020\005\012\006\013\007\010\010\005\011\022" +
    "\012\036\013\021\021\034\022\157\025\171\026\202\027" +
    "\155\030\201\031\154\037\u0136\061\015\062\177\063\203" +
    "\065\u0131\067\033\001\002\000\034\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\021\ufff2\061\ufff2\066\ufff2\067\ufff2\001\002\000\032\003" +
    "\uffef\022\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\037\uffef\061\uffef\062\uffef\063\uffef\065\uffef\001\002\000" +
    "\032\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\021\uffc7\037\uffc7\066\uffc7\067\uffc7\001" +
    "\002\000\024\003\056\017\044\020\054\034\050\055\060" +
    "\056\057\057\046\060\047\061\052\001\002\000\006\037" +
    "\uff9b\040\uffe3\001\002\000\032\003\uffeb\022\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\037\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\065\uffeb\001\002\000\032\003\uffea\022\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\037\uffea\061" +
    "\uffea\062\uffea\063\uffea\065\uffea\001\002\000\032\003\uffe6" +
    "\022\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\037" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\065\uffe6\001\002\000\034" +
    "\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\021\uffcd\061\uffcd\066\uffcd\067\uffcd" +
    "\001\002\000\032\003\uffed\022\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\037\uffed\061\uffed\062\uffed\063\uffed" +
    "\065\uffed\001\002\000\032\003\uffe9\022\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\037\uffe9\061\uffe9\062\uffe9" +
    "\063\uffe9\065\uffe9\001\002\000\032\003\uffee\022\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\037\uffee\061\uffee" +
    "\062\uffee\063\uffee\065\uffee\001\002\000\032\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\021\uffc9\037\uffc9\066\uffc9\067\uffc9\001\002\000\032\003" +
    "\uffe5\022\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\037\uffe5\061\uffe5\062\uffe5\063\uffe5\065\uffe5\001\002\000" +
    "\032\003\ufff0\022\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\037\ufff0\061\ufff0\062\ufff0\063\ufff0\065\ufff0\001" +
    "\002\000\032\003\uffec\022\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\037\uffec\061\uffec\062\uffec\063\uffec\065" +
    "\uffec\001\002\000\032\003\uffe7\022\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\037\uffe7\061\uffe7\062\uffe7\063" +
    "\uffe7\065\uffe7\001\002\000\032\003\uffe4\022\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\037\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\065\uffe4\001\002\000\032\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\021" +
    "\uffc8\037\uffc8\066\uffc8\067\uffc8\001\002\000\032\003\u0132" +
    "\022\157\025\171\026\202\027\155\030\201\031\154\037" +
    "\u014a\061\015\062\177\063\203\065\u0131\001\002\000\032" +
    "\003\uffe8\022\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\037\uffe8\061\uffe8\062\uffe8\063\uffe8\065\uffe8\001\002" +
    "\000\032\004\020\005\012\006\013\007\010\010\005\011" +
    "\022\012\036\013\021\021\034\037\u0146\066\u0144\067\033" +
    "\001\002\000\030\003\u0132\022\157\025\171\026\202\027" +
    "\155\030\201\031\154\061\015\062\177\063\203\065\u0131" +
    "\001\002\000\032\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\021\uffca\037\uffca\066\uffca" +
    "\067\uffca\001\002\000\034\003\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\021\uffcf" +
    "\061\uffcf\066\uffcf\067\uffcf\001\002\000\032\003\u0132\022" +
    "\157\025\171\026\202\027\155\030\201\031\154\037\u0148" +
    "\061\015\062\177\063\203\065\u0131\001\002\000\034\003" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\021\uffd0\061\uffd0\066\uffd0\067\uffd0\001" +
    "\002\000\032\003\ufff1\022\ufff1\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\037\ufff1\061\ufff1\062\ufff1\063\ufff1\065" +
    "\ufff1\001\002\000\034\003\uffce\004\uffce\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\021\uffce\061" +
    "\uffce\066\uffce\067\uffce\001\002\000\004\040\u014c\001\002" +
    "\000\032\003\uffe2\022\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\037\uffe2\061\uffe2\062\uffe2\063\uffe2\065\uffe2" +
    "\001\002\000\004\040\u014e\001\002\000\032\003\uffda\022" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\037\uffda" +
    "\061\uffda\062\uffda\063\uffda\065\uffda\001\002\000\004\037" +
    "\u0150\001\002\000\034\003\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\021\uffcb\061" +
    "\uffcb\066\uffcb\067\uffcb\001\002\000\004\035\u0152\001\002" +
    "\000\006\003\uffd6\036\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0150\000\036\003\010\011\022\012\016\013\030\014" +
    "\031\016\005\017\027\020\026\023\003\030\034\031\036" +
    "\032\013\067\006\105\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\323\022\322" +
    "\024\317\025\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\076\035\075\001\001\000\004\011\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\116\141\132\060\001\001\000\002" +
    "\001\001\000\020\031\042\070\050\071\041\072\143\073" +
    "\054\074\052\112\040\001\001\000\030\003\010\014\136" +
    "\016\005\017\027\020\026\023\003\030\034\031\036\032" +
    "\013\067\006\105\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\042\070\050" +
    "\071\041\072\044\073\054\074\052\112\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\031\042\070\050\071\041\074\120\112\040" +
    "\001\001\000\002\001\001\000\010\034\076\035\075\113" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\132\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\031\042\070\050\071\041\074\073\112\040\001\001\000" +
    "\014\031\042\070\050\071\041\074\072\112\040\001\001" +
    "\000\014\031\042\070\050\071\041\074\071\112\040\001" +
    "\001\000\014\031\042\070\050\071\041\074\070\112\040" +
    "\001\001\000\014\031\042\070\050\071\041\074\067\112" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\117\001\001\000\002\001\001\000\004" +
    "\130\115\001\001\000\016\031\042\070\050\071\041\073" +
    "\113\074\052\112\040\001\001\000\020\031\042\070\050" +
    "\071\041\073\104\074\052\112\040\114\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\121\106\132\060\001\001\000\016\031\042\070\050\071" +
    "\041\073\107\074\052\112\040\001\001\000\002\001\001" +
    "\000\016\031\042\070\050\071\041\073\112\074\052\112" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\076\035\124\001\001\000" +
    "\006\033\126\034\117\001\001\000\006\130\115\131\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\140\001\001\000\002\001" +
    "\001\000\004\116\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\115\147\001\001\000\004" +
    "\005\151\001\001\000\046\002\155\003\175\004\160\017" +
    "\027\020\026\023\166\030\172\031\036\032\152\036\162" +
    "\050\161\053\167\055\177\057\173\060\163\067\165\103" +
    "\171\104\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\u0112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\125\340\132\060\001\001" +
    "\000\044\002\336\003\175\017\027\020\026\023\166\030" +
    "\172\031\036\032\152\036\162\050\161\053\167\055\177" +
    "\057\173\060\163\067\165\103\171\104\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\323\022\322\024\317\025\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\272\001\001\000\050\002\213\003" +
    "\175\005\212\017\027\020\026\023\166\030\172\031\036" +
    "\032\152\036\162\050\161\053\167\055\177\056\214\057" +
    "\173\060\163\067\165\103\171\104\174\001\001\000\002" +
    "\001\001\000\004\031\204\001\001\000\002\001\001\000" +
    "\006\034\076\035\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\031\234\070\222\071\223\075\217\076\232\077" +
    "\226\100\225\101\224\102\233\112\227\001\001\000\002" +
    "\001\001\000\024\031\234\070\222\071\223\076\267\077" +
    "\226\100\225\101\224\102\233\112\227\001\001\000\010" +
    "\034\076\035\075\113\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\031\234\070" +
    "\222\071\223\076\255\077\226\100\225\101\224\102\233" +
    "\112\227\001\001\000\004\132\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\031\234" +
    "\070\222\102\250\112\242\001\001\000\012\031\234\070" +
    "\222\102\247\112\242\001\001\000\012\031\234\070\222" +
    "\102\246\112\242\001\001\000\012\031\234\070\222\102" +
    "\245\112\242\001\001\000\012\031\234\070\222\102\244" +
    "\112\242\001\001\000\002\001\001\000\010\034\076\035" +
    "\075\113\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\031\234\070\222\071\223\076\254\077\226\100\225" +
    "\101\224\102\233\112\227\001\001\000\024\031\234\070" +
    "\222\071\223\076\253\077\226\100\225\101\224\102\233" +
    "\112\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\234\070\222" +
    "\101\266\102\233\112\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\031\042\063\276\064\274" +
    "\070\050\071\041\073\275\074\052\112\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\031\042\063\301\070" +
    "\050\071\041\073\275\074\052\112\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\303\001\001\000" +
    "\002\001\001\000\006\034\076\035\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\031\234\070\222\071\223\075\312\076\232" +
    "\077\226\100\225\101\224\102\233\112\227\001\001\000" +
    "\002\001\001\000\050\002\315\003\175\005\314\017\027" +
    "\020\026\023\166\030\172\031\036\032\152\036\162\050" +
    "\161\051\316\053\167\055\177\057\173\060\163\067\165" +
    "\103\171\104\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\126\330\127\327\001\001\000\020\031\042\070" +
    "\050\071\041\072\326\073\054\074\052\112\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\031\042\070\050" +
    "\071\041\072\331\073\054\074\052\112\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\323\022\322" +
    "\024\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\031\234\037\344\070\222\071\223\075" +
    "\343\076\232\077\226\100\225\101\224\102\233\112\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\002" +
    "\347\003\175\005\346\017\027\020\026\023\166\030\172" +
    "\031\036\032\152\036\162\040\351\044\350\050\161\053" +
    "\167\055\177\057\173\060\163\067\165\103\171\104\174" +
    "\001\001\000\010\045\372\046\370\047\366\001\001\000" +
    "\010\041\356\042\354\043\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\002\365\003" +
    "\175\017\027\020\026\023\166\030\172\031\036\032\152" +
    "\036\162\050\161\053\167\055\177\057\173\060\163\067" +
    "\165\103\171\104\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\360\043\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\031\234\070\222\071\223" +
    "\075\362\076\232\077\226\100\225\101\224\102\233\112" +
    "\227\001\001\000\002\001\001\000\044\002\364\003\175" +
    "\017\027\020\026\023\166\030\172\031\036\032\152\036" +
    "\162\050\161\053\167\055\177\057\173\060\163\067\165" +
    "\103\171\104\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\374\047\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\031\234" +
    "\070\222\071\223\075\376\076\232\077\226\100\225\101" +
    "\224\102\233\112\227\001\001\000\002\001\001\000\004" +
    "\005\u0100\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\027\020\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\031\234\070\222\071" +
    "\223\075\u0107\076\232\077\226\100\225\101\224\102\233" +
    "\112\227\001\001\000\002\001\001\000\004\052\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\002\u0110\003\175\005\u010f\017" +
    "\027\020\026\023\166\030\172\031\036\032\152\036\162" +
    "\050\161\053\167\054\u010e\055\177\057\173\060\163\067" +
    "\165\103\171\104\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\031\042\063\u0114\065" +
    "\u0115\070\050\071\041\073\275\074\052\112\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\042\063\u0118\070\050\071\041" +
    "\073\275\074\052\112\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\u011c\001\001\000\004\107\u011e\001\001\000\004\122" +
    "\u0150\001\001\000\004\015\u012d\001\001\000\010\067\u0123" +
    "\106\u0124\110\u0120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\123\u0129\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\067\u0123\110\u0127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\124\u014e\001\001\000\056\003" +
    "\u013f\006\u0140\007\u013b\010\u0138\017\027\020\026\023\u0136" +
    "\026\u0142\027\u0139\030\u013c\031\036\032\u012f\036\u0132\050" +
    "\u0133\053\u0137\055\u0141\057\u013d\060\u0134\067\165\103\u013a" +
    "\104\u013e\111\u012e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\031\042\070\050\071\041" +
    "\073\u014c\074\052\112\040\001\001\000\006\120\u014a\132" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\007\u0148\010\u0138" +
    "\017\027\020\026\023\u0136\030\u013c\031\036\036\u0132\050" +
    "\u0133\053\u0137\055\u0141\057\u013d\060\u0134\103\u013a\104\u013e" +
    "\111\u012e\001\001\000\002\001\001\000\012\003\u013f\027" +
    "\u0144\032\u012f\067\165\001\001\000\044\006\u0146\007\u013b" +
    "\010\u0138\017\027\020\026\023\u0136\030\u013c\031\036\036" +
    "\u0132\050\u0133\053\u0137\055\u0141\057\u013d\060\u0134\103\u013a" +
    "\104\u013e\111\u012e\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\007\u0148\010\u0138\017\027\020\026\023\u0136" +
    "\030\u013c\031\036\036\u0132\050\u0133\053\u0137\055\u0141\057" +
    "\u013d\060\u0134\103\u013a\104\u013e\111\u012e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	private ManejadorParser mp = null;

	// Connect this parser to a scanner!
	public parser2(Lexer1 lex, ManejadorParser mp) {
		super(lex); 
		this.mp = mp;
	}

        public void syntax_error(Symbol s) {
        	System.out.println("Error");
            mp.printSintaxError(s);
        }

        public void report_error(String message, Object info){
        	System.out.println(message);
        	//System.out.println("Error");
        }

        public void report_fatal_error (String message, Object info){
        	System.out.println("Fatal Error");
        	mp.printSintaxError("No se ha encontrado ninguna estructura valida");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser2$actions {
  private final parser2 parser;

  /** Constructor */
  CUP$parser2$actions(parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action_part00000000(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser2$result;

      /* select the action based on the action number */
      switch (CUP$parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= globalInstruction EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto start_val = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = start_val;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser2$parser.done_parsing();
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // globalInstruction ::= bodyInstruction SEPARATOR mainInstruction 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("globalInstruction",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globalInstruction ::= SEPARATOR mainInstruction 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("globalInstruction",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globalInstruction ::= mainInstruction 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("globalInstruction",8, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
mp.setMainDecl(e1);mp.setGlobal(false);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$0",75, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainInstruction ::= MAIN OPEN_BRK CLOSE_BRK NT$0 block 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		mp.setGlobal(true);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("mainInstruction",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Estructura de MAIN no valida o faltante");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$1",76, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // mainInstruction ::= error NT$1 CLOSE_BRK 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("mainInstruction",7, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= OPEN_SQR instructions CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block ::= OPEN_SQR CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bodyInstruction ::= bodyInstruction bodyInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodyInstruction",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bodyInstruction ::= bodyInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodyInstruction",9, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bodyInstructionA ::= subprogram 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodyInstructionA",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bodyInstructionA ::= instructionB 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodyInstructionA",10, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.setSubprogramDecl(e1, e2, e2left, e2right); mp.setGlobal(false);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$2",77, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // subprogram ::= tipo VARIABLE NT$2 parametrosA bodySubprogram 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e4 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		mp.setGlobal(true);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("subprogram",67, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programInstruction ::= programInstruction programInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstruction",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programInstruction ::= programInstructionA 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstruction",4, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programInstructionA ::= rtrn 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionA",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programInstructionA ::= programInstructionB 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionA",5, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programInstructionB ::= formalAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programInstructionB ::= arrayAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // programInstructionB ::= if 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // programInstructionB ::= while 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // programInstructionB ::= for 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // programInstructionB ::= doWhile 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // programInstructionB ::= print 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // programInstructionB ::= println 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // programInstructionB ::= scans 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // programInstructionB ::= scann 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Instruccion no conocida en cuerpo de programa: ");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$3",78, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // programInstructionB ::= error NT$3 SEMICOLON 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("programInstructionB",6, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subprogramCall ::= VARIABLE paramsA 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("subprogramCall",72, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramsA ::= OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsA",73, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramsA ::= OPEN_BRK paramsProgram CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsA",73, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramsProgram ::= paramsProgram COMMA opNum 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsProgram",74, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramsProgram ::= opNum 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsProgram",74, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$4 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Parametros no validos para llamada de subprograma");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$4",79, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramsProgram ::= error NT$4 opNum 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("paramsProgram",74, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // rtrn ::= RETURN opNum SEMICOLON 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rtrn",71, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametrosA ::= OPEN_BRK CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametrosA",69, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametrosA ::= OPEN_BRK parametros CLOSE_BRK 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametrosA",69, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Parametros no validos para declaracion de subprograma");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$5",80, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametrosA ::= error NT$5 CLOSE_BRK 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametrosA",69, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= parametros COMMA parametro 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametros",68, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= parametro 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametros",68, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro ::= tipo VARIABLE 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		mp.setParametroDecl(e1, e2, e2left, e2right);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametro",70, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$6 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error parametro");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$6",81, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro ::= error NT$6 VARIABLE 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("parametro",70, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bodySubprogram ::= OPEN_SQR declns SEPARATOR programInstruction CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bodySubprogram ::= OPEN_SQR declns CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bodySubprogram ::= OPEN_SQR programInstruction CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bodySubprogram ::= OPEN_SQR CLOSE_SQR 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$7 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error bodySubprogram");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$7",82, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bodySubprogram ::= error NT$7 CLOSE_SQR 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bodySubprogram",11, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declns ::= declns declns1 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("declns",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declns ::= declns1 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("declns",20, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declns1 ::= decl 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("declns1",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declns1 ::= array 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("declns1",21, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instructions ::= instructions instruction 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructions",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instructions ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructions",2, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instructionB ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instructionB ::= formalAssign 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instructionB ::= arrayAssign 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instructionB ::= array 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instructionB",12, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruction ::= decl 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruction ::= formalAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruction ::= arrayAssign 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruction ::= array 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instruction ::= if 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instruction ::= while 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instruction ::= for 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruction ::= doWhile 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instruction ::= print 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruction ::= println 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruction ::= scans 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruction ::= scann 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$8 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Instruccion no conocida");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$8",83, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instruction ::= error NT$8 SEMICOLON 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // decl ::= tipo decls SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		mp.setVariableDecl(e2,e1);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // decls ::= decls COMMA decl1 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getDecls(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decls",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // decls ::= decl1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decls",19, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // decl1 ::= assign2 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decl1",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // decl1 ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimpleAsign(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("decl1",18, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign2 ::= assign3 exp 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e1;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign2",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$9 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error de asignacion");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$9",84, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assign2 ::= error NT$9 exp 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign2",15, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assign3 ::= VARIABLE ASSIGN 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimpleAsign(e1, e1left, e1right);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign3",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$10 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error de asignacion variable");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$10",85, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assign3 ::= error NT$10 ASSIGN 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign3",16, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arrayDim ::= arrayDim arrayDim1 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getDimensions(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDim",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arrayDim ::= arrayDim1 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDim",27, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arrayDim1 ::= OPEN_SQR opNum CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = mp.getDimension(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDim1",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$11 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error de array dimension");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$11",86, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arrayDim1 ::= error NT$11 CLOSE_SQR 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayDim1",26, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // array ::= ARRAY tipo arrayDim assignA SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Tipo e1 = (Tipo)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = mp.setArrayDecl(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("array",24, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // assignA ::= assignA COMMA VARIABLE 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getArrayAsign(e1, e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assignA",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // assignA ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimpleArrayAsign(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assignA",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$12 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error de asignacion 01");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$12",87, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // assignA ::= error NT$12 VARIABLE 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assignA",25, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // arrayAssign ::= arrayPosition ASSIGN exp SEMICOLON 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayAssign",22, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // arrayPosition ::= VARIABLE arrayDim 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayPosition",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$13 ::= 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
mp.printSintaxError("Error array posicion");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("NT$13",88, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // arrayPosition ::= error NT$13 CLOSE_SQR 
            {
              Cuarteto RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Cuarteto) ((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("arrayPosition",23, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if ::= IF OPEN_BRK if1 CLOSE_BRK ifA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // if ::= IF OPEN_BRK if1 CLOSE_BRK ifB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // if1 ::= opBol 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("if1",29, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ifA ::= instruction elseifA elseA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifA",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ifA ::= instruction elseifA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifA",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ifA ::= instruction elseA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifA",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ifA ::= instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifA",30, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // elseifA ::= elseifA elseifAA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifA",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // elseifA ::= elseifAA 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifA",31, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // elseifAA ::= ELSIF OPEN_BRK opBol CLOSE_BRK instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifAA",32, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // elseA ::= ELSE instruction 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseA",33, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ifB ::= block elseifB elseB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifB",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ifB ::= block elseifB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifB",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ifB ::= block elseB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifB",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ifB ::= block 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("ifB",34, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // elseifB ::= elseifB elseifBB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifB",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // elseifB ::= elseifBB 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifB",35, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // elseifBB ::= ELSIF OPEN_BRK opBol CLOSE_BRK block 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseifBB",36, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // elseB ::= ELSE block 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("elseB",37, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // while ::= WHILE OPEN_BRK opBol CLOSE_BRK whileA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("while",38, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // whileA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("whileA",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // whileA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("whileA",39, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // doWhile ::= DO doWhileA WHILE OPEN_BRK opBol CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("doWhile",43, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // doWhileA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("doWhileA",44, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // doWhileA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("doWhileA",44, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // for ::= FOR OPEN_BRK assign COLON opBol COLON signo NUM_INTEGER CLOSE_BRK forA 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-7)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-5)).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-3)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e5 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("for",41, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-9)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // forA ::= instruction 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("forA",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // forA ::= block 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("forA",42, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // scans ::= SCANS OPEN_SQR VARIABLE CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("scans",65, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // scans ::= SCANS OPEN_SQR arrayPosition CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("scans",65, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // scann ::= SCANN OPEN_SQR VARIABLE CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("scann",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // scann ::= SCANN OPEN_SQR arrayPosition CLOSE_SQR SEMICOLON 
            {
              Cuarteto RESULT =null;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("scann",66, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-4)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // print ::= PRINT printA SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("print",45, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // println ::= PRINTLN printB SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("println",46, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // printA ::= OPEN_SQR valueA CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("printA",47, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // printB ::= OPEN_SQR valueB CLOSE_SQR 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("printB",48, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // valueA ::= valueA COMMA value 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("valueA",50, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // valueA ::= value 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("valueA",50, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // valueB ::= valueB COMMA value 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("valueB",51, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // valueB ::= value 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("valueB",51, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // value ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("value",49, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // signo ::= PLUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("signo",40, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // signo ::= MINUS 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("signo",40, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // formalAssign ::= assign SEMICOLON 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("formalAssign",17, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // assign ::= assign1 exp 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign",14, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // assign1 ::= VARIABLE ASSIGN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("assign1",13, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // exp ::= opNum 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("exp",56, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // opNum ::= e 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.orderOpNum(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opNum",57, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // e ::= e MULTI e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getMulti(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // e ::= e MINUS e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getResta(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // e ::= e DIVISION e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getDivision(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // e ::= e MODULE e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getModulo(e1,e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // e ::= e PLUS e 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSumaConcatenacion(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // e ::= OPEN_BRK e CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // e ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getCuartetoNum(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // e ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // e ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getVariable(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // e ::= TEXT 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getCuartetoString(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // e ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getCuartetoBool(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // e ::= subprogramCall 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("e",58, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // num ::= NUM_INTEGER 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolEntero(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("num",54, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // num ::= NUM_FLOAT 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolFloat(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("num",54, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // num ::= NUM_DOUBLE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolDouble(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("num",54, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // opBol ::= b 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opBol",59, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // b ::= b AND b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getAnd(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // b ::= b OR b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getOr(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // b ::= NOT b 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e2 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getNot(e1,e2);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // b ::= OPEN_BRK b CLOSE_BRK 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // b ::= opRel 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // b ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getVariableRel(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // b ::= bool 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getBool(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // b ::= subprogramCall 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("b",60, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // opRel ::= r 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("opRel",61, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // r ::= expRel rel expRel 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getRelacion(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("r",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // r ::= error 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		mp.printSintaxError("Error de expresion relacional");
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("r",62, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // rel ::= HIGHER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // rel ::= LOWER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // rel ::= HIGHER_EQ 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // rel ::= LOWER_EQ 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // rel ::= NOT_EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // rel ::= EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = e;
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("rel",52, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expRel ::= er 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.orderOpNum(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("expRel",63, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // er ::= er MULTI er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getMulti(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // er ::= er MINUS er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getResta(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // er ::= er DIVISION er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getDivision(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // er ::= er MODULE er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getModulo(e1,e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // er ::= er PLUS er 
            {
              Cuarteto RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)).right;
		Cuarteto e1 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.elementAt(CUP$parser2$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e3 = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSumaConcatenacion(e1, e2, e3);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.elementAt(CUP$parser2$top-2)), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // er ::= num 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Simbolo e = (Simbolo)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getCuartetoNum(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // er ::= arrayPosition 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		Cuarteto e = (Cuarteto)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // er ::= VARIABLE 
            {
              Cuarteto RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getVariable(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // er ::= subprogramCall 
            {
              Cuarteto RESULT =null;

              CUP$parser2$result = parser.getSymbolFactory().newSymbol("er",64, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // bool ::= TRUE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolBoolean(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bool",55, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // bool ::= FALSE 
            {
              Simbolo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getSimbolBoolean(e, eleft, eright);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("bool",55, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // tipo ::= BYTE 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // tipo ::= INT 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // tipo ::= LONG 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // tipo ::= DOUBLE 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // tipo ::= STRING 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // tipo ::= VOID 
            {
              Tipo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser2$stack.peek()).value;
		RESULT = mp.getTipoByKey(e);
              CUP$parser2$result = parser.getSymbolFactory().newSymbol("tipo",53, ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser2$stack.peek()), RESULT);
            }
          return CUP$parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser2$do_action(
    int                        CUP$parser2$act_num,
    java_cup.runtime.lr_parser CUP$parser2$parser,
    java.util.Stack            CUP$parser2$stack,
    int                        CUP$parser2$top)
    throws java.lang.Exception
    {
              return CUP$parser2$do_action_part00000000(
                               CUP$parser2$act_num,
                               CUP$parser2$parser,
                               CUP$parser2$stack,
                               CUP$parser2$top);
    }
}

}
